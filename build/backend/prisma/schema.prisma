// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para módulos de build
model BuildModule {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  status      String   @default("not-started") // not-started, in-progress, completed, failed, paused
  progress    Int      @default(0) // 0-100
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  builds Build[]

  @@map("build_modules")
}

// Modelo para builds individuales
model Build {
  id           String    @id @default(cuid())
  moduleName   String
  status       String    @default("queued") // queued, processing, completed, failed, cancelled
  priority     String    @default("normal") // low, normal, high, urgent
  startTime    DateTime?
  endTime      DateTime?
  duration     Int? // duración en milisegundos
  error        String?
  retryCount   Int       @default(0)
  buildSize    Int? // tamaño del build en bytes
  compressedSize Int? // tamaño comprimido en bytes
  optimizationRatio Float? // ratio de optimización
  metadata     Json? // metadatos adicionales
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relaciones
  module BuildModule @relation(fields: [moduleName], references: [name], onDelete: Cascade)

  // Índices
  @@index([moduleName])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@unique([moduleName, startTime])

  @@map("builds")
}

// Modelo para notificaciones
model Notification {
  id         String   @id @default(cuid())
  type       String   // info, success, warning, error
  title      String
  message    String
  moduleName String?
  jobId      String?
  userId     String?
  priority   String   @default("normal") // low, normal, high, urgent
  channels   String[] // email, webhook, slack, websocket, database
  status     String   @default("pending") // pending, sent, failed
  error      String?
  metadata   Json?
  createdAt  DateTime @default(now())
  sentAt     DateTime?
  updatedAt  DateTime @updatedAt

  // Índices
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@index([userId])

  @@map("notifications")
}

// Modelo para logs del sistema
model SystemLog {
  id        String   @id @default(cuid())
  level     String   // error, warn, info, debug, trace
  service   String
  message   String
  metadata  Json?
  timestamp DateTime @default(now())

  // Índices
  @@index([level])
  @@index([service])
  @@index([timestamp])

  @@map("system_logs")
}

// Modelo para métricas del sistema
model SystemMetric {
  id        String   @id @default(cuid())
  name      String
  value     Float
  unit      String?
  tags      Json? // tags adicionales como key-value
  timestamp DateTime @default(now())

  // Índices
  @@index([name])
  @@index([timestamp])

  @@map("system_metrics")
}

// Modelo para configuración del sistema
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  type        String   @default("string") // string, number, boolean, json
  isSecret    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
}

// Modelo para usuarios del sistema (si se implementa autenticación)
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  role        String   @default("user") // admin, user, guest
  permissions String[] // array de permisos
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  notifications Notification[]

  // Índices
  @@index([email])
  @@index([role])
  @@index([isActive])

  @@map("users")
}

// Modelo para sesiones de usuario
model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Índices
  @@index([userId])
  @@index([token])
  @@index([expiresAt])

  @@map("user_sessions")
}

// Modelo para auditoría de acciones
model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String   // create, update, delete, login, logout, etc.
  resource    String   // build, module, notification, etc.
  resourceId  String?
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())

  // Relaciones
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Índices
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])

  @@map("audit_logs")
}

// Modelo para archivos y assets
model Asset {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  url         String?
  hash        String? // hash del archivo para verificación
  metadata    Json?
  uploadedBy  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Índices
  @@index([filename])
  @@index([mimeType])
  @@index([uploadedBy])
  @@index([createdAt])

  @@map("assets")
}

// Modelo para jobs programados
model ScheduledJob {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  cronExpression String
  isActive    Boolean  @default(true)
  lastRun     DateTime?
  nextRun     DateTime?
  runCount    Int      @default(0)
  errorCount  Int      @default(0)
  lastError   String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Índices
  @@index([name])
  @@index([isActive])
  @@index([nextRun])

  @@map("scheduled_jobs")
}

// Modelo para webhooks
model Webhook {
  id          String   @id @default(cuid())
  name        String   @unique
  url         String
  method      String   @default("POST")
  headers     Json?
  events      String[] // array de eventos que activan el webhook
  isActive    Boolean  @default(true)
  secret      String? // secret para verificar webhooks
  lastTriggered DateTime?
  successCount Int     @default(0)
  errorCount   Int     @default(0)
  lastError    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Índices
  @@index([name])
  @@index([isActive])
  @@index([lastTriggered])

  @@map("webhooks")
}

// Modelo para webhook deliveries
model WebhookDelivery {
  id        String   @id @default(cuid())
  webhookId String
  event     String
  payload   Json
  response  Json?
  statusCode Int?
  success   Boolean
  error     String?
  duration  Int? // duración en milisegundos
  createdAt DateTime @default(now())

  // Relaciones
  webhook Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  // Índices
  @@index([webhookId])
  @@index([event])
  @@index([success])
  @@index([createdAt])

  @@map("webhook_deliveries")
}

// Relaciones adicionales
model User {
  sessions   UserSession[]
  auditLogs  AuditLog[]
}

model Webhook {
  deliveries WebhookDelivery[]
} 