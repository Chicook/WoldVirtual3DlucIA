import { binSystem } from './core/BinSystem';
import { messageBus } from './core/InterModuleMessageBus';
import { moduleRegistry } from './core/ModuleRegistry';

/**
 * Script de prueba del sistema .bin
 * Verifica todas las funcionalidades principales
 */
async function testBinSystem() {
  console.log('üß™ Iniciando pruebas del sistema .bin...\n');

  try {
    // Test 1: Inicializaci√≥n del sistema
    console.log('üìã Test 1: Inicializaci√≥n del sistema');
    await binSystem.initialize();
    console.log('‚úÖ Sistema inicializado correctamente\n');

    // Test 2: Estado del sistema
    console.log('üìã Test 2: Estado del sistema');
    const systemStatus = binSystem.getSystemStatus();
    console.log('Estado del sistema:', {
      isInitialized: systemStatus.isInitialized,
      totalModules: systemStatus.moduleRegistry.totalModules,
      discoveredModules: systemStatus.moduleRegistry.discoveredModules
    });
    console.log('‚úÖ Estado del sistema obtenido correctamente\n');

    // Test 3: Registro de m√≥dulos
    console.log('üìã Test 3: Registro de m√≥dulos');
    const discoveredModules = moduleRegistry.getDiscoveredModules();
    console.log('M√≥dulos descubiertos:', discoveredModules);
    console.log('‚úÖ Registro de m√≥dulos funcionando\n');

    // Test 4: Carga de m√≥dulo
    console.log('üìã Test 4: Carga de m√≥dulo');
    if (discoveredModules.length > 0) {
      const testModule = discoveredModules[0];
      const testUserId = 'test-user-' + Date.now();
      
      console.log(`Cargando m√≥dulo: ${testModule} para usuario: ${testUserId}`);
      await binSystem.loadModuleForUser(testModule, testUserId);
      console.log('‚úÖ M√≥dulo cargado correctamente\n');
    }

    // Test 5: Message Bus
    console.log('üìã Test 5: Message Bus');
    let messageReceived = false;
    
    messageBus.subscribe('test-channel', (message: any) => {
      console.log('Mensaje recibido:', message);
      messageReceived = true;
    });

    messageBus.publish('test-channel', { test: 'data', timestamp: Date.now() });
    
    // Esperar un poco para que se procese el mensaje
    await new Promise(resolve => setTimeout(resolve, 100));
    
    if (messageReceived) {
      console.log('‚úÖ Message Bus funcionando correctamente\n');
    } else {
      console.log('‚ùå Message Bus no funcion√≥\n');
    }

    // Test 6: Estad√≠sticas del Message Bus
    console.log('üìã Test 6: Estad√≠sticas del Message Bus');
    const messageBusStats = messageBus.getStats();
    console.log('Estad√≠sticas del Message Bus:', messageBusStats);
    console.log('‚úÖ Estad√≠sticas obtenidas correctamente\n');

    // Test 7: Carga de grupo de m√≥dulos
    console.log('üìã Test 7: Carga de grupo de m√≥dulos');
    const testUserId2 = 'test-user-group-' + Date.now();
    
    try {
      await binSystem.loadModuleGroupForUser('CORE', testUserId2);
      console.log('‚úÖ Grupo de m√≥dulos cargado correctamente\n');
    } catch (error) {
      console.log('‚ö†Ô∏è Carga de grupo fall√≥ (puede ser normal si no hay m√≥dulos core):', error instanceof Error ? error.message : 'Error desconocido', '\n');
    }

    // Test 8: APIs de m√≥dulos
    console.log('üìã Test 8: APIs de m√≥dulos');
    if (discoveredModules.length > 0) {
      const testModule = discoveredModules[0];
      const moduleAPI = binSystem.getModuleAPI(testModule);
      
      if (moduleAPI) {
        console.log(`API del m√≥dulo ${testModule}:`, Object.keys(moduleAPI));
        console.log('‚úÖ API del m√≥dulo obtenida correctamente\n');
      } else {
        console.log(`‚ùå No se pudo obtener la API del m√≥dulo ${testModule}\n`);
      }
    }

    // Test 9: Ejecuci√≥n de acci√≥n (simulada)
    console.log('üìã Test 9: Ejecuci√≥n de acci√≥n (simulada)');
    if (discoveredModules.length > 0) {
      const testModule = discoveredModules[0];
      const testUserId3 = 'test-user-action-' + Date.now();
      
      try {
        // Intentar ejecutar una acci√≥n (puede fallar si el m√≥dulo no tiene esa acci√≥n)
        await binSystem.executeModuleAction(testModule, 'getStatus', [], testUserId3);
        console.log('‚úÖ Acci√≥n ejecutada correctamente\n');
      } catch (error) {
        console.log(`‚ö†Ô∏è Ejecuci√≥n de acci√≥n fall√≥ (normal si la acci√≥n no existe): ${error instanceof Error ? error.message : 'Error desconocido'}\n`);
      }
    }

    // Test 10: Limpieza de sesiones
    console.log('üìã Test 10: Limpieza de sesiones');
    const testUserId4 = 'test-user-cleanup-' + Date.now();
    
    // Cargar un m√≥dulo para crear una sesi√≥n
    if (discoveredModules.length > 0) {
      await binSystem.loadModuleForUser(discoveredModules[0], testUserId4);
      
      // Limpiar la sesi√≥n
      await binSystem.cleanupUserSession(testUserId4);
      console.log('‚úÖ Sesi√≥n limpiada correctamente\n');
    }

    // Test 11: Recarga de m√≥dulo
    console.log('üìã Test 11: Recarga de m√≥dulo');
    if (discoveredModules.length > 0) {
      const testModule = discoveredModules[0];
      
      try {
        await moduleRegistry.reloadModule(testModule);
        console.log('‚úÖ M√≥dulo recargado correctamente\n');
      } catch (error) {
        console.log(`‚ö†Ô∏è Recarga de m√≥dulo fall√≥: ${error instanceof Error ? error.message : 'Error desconocido'}\n`);
      }
    }

    // Test 12: Estado final del sistema
    console.log('üìã Test 12: Estado final del sistema');
    const finalStatus = binSystem.getSystemStatus();
    console.log('Estado final:', {
      isInitialized: finalStatus.isInitialized,
      totalModules: finalStatus.moduleRegistry.totalModules,
      activeUsers: finalStatus.centralCoordinator.activeUsers
    });
    console.log('‚úÖ Estado final obtenido correctamente\n');

    console.log('üéâ ¬°Todas las pruebas completadas exitosamente!');
    console.log('üìä Resumen:');
    console.log(`   - M√≥dulos descubiertos: ${discoveredModules.length}`);
    console.log(`   - Sistema inicializado: ${systemStatus.isInitialized}`);
    console.log(`   - Message Bus activo: ${messageBusStats.isEnabled}`);

  } catch (error) {
    console.error('‚ùå Error durante las pruebas:', error);
    throw error;
  } finally {
    // Limpiar recursos
    console.log('\nüßπ Limpiando recursos...');
    try {
      await binSystem.shutdown();
      console.log('‚úÖ Sistema cerrado correctamente');
    } catch (error) {
      console.error('‚ùå Error cerrando el sistema:', error);
    }
  }
}

// Funci√≥n para ejecutar pruebas espec√≠ficas
async function runSpecificTest(testName: string) {
  console.log(`üß™ Ejecutando prueba espec√≠fica: ${testName}\n`);

  switch (testName) {
    case 'initialization':
      await binSystem.initialize();
      console.log('‚úÖ Prueba de inicializaci√≥n completada');
      break;

    case 'message-bus':
      messageBus.publish('test', { data: 'test' });
      console.log('‚úÖ Prueba de Message Bus completada');
      break;

    case 'module-registry':
      await moduleRegistry.initialize();
      const modules = moduleRegistry.getDiscoveredModules();
      console.log('‚úÖ Prueba de registro de m√≥dulos completada:', modules);
      break;

    default:
      console.log('‚ùå Prueba no encontrada:', testName);
  }
}

// Ejecutar pruebas si se llama directamente
if (require.main === module) {
  const testName = process.argv[2];
  
  if (testName) {
    runSpecificTest(testName).catch(console.error);
  } else {
    testBinSystem().catch(console.error);
  }
}

export { testBinSystem, runSpecificTest }; 