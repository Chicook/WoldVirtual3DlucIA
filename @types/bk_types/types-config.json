{
  "metadata": {
    "name": "WoldVirtual3DlucIA Types Configuration",
    "version": "1.0.0",
    "description": "Configuración centralizada de tipos TypeScript para el metaverso",
    "generator": "TypeGenerator.py",
    "validator": "TypeValidator.js",
    "lastUpdated": "2024-01-15T10:30:00Z",
    "author": "WoldVirtual3DlucIA Team",
    "license": "MIT"
  },
  "settings": {
    "strictMode": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitOverride": true,
    "allowUnusedLabels": false,
    "allowUnreachableCode": false
  },
  "namingConventions": {
    "interfaces": {
      "pattern": "^[A-Z][a-zA-Z0-9]*$",
      "description": "PascalCase para interfaces",
      "examples": ["UserProfile", "GameState", "NetworkConfig"]
    },
    "types": {
      "pattern": "^[A-Z][a-zA-Z0-9]*$",
      "description": "PascalCase para tipos",
      "examples": ["UserId", "GameMode", "ConnectionStatus"]
    },
    "enums": {
      "pattern": "^[A-Z][a-zA-Z0-9]*$",
      "description": "PascalCase para enums",
      "examples": ["UserRole", "GameState", "ErrorCode"]
    },
    "enumMembers": {
      "pattern": "^[A-Z][A-Z0-9_]*$",
      "description": "UPPER_CASE para miembros de enum",
      "examples": ["ADMIN", "PLAYER", "SPECTATOR"]
    },
    "properties": {
      "pattern": "^[a-z][a-zA-Z0-9]*$",
      "description": "camelCase para propiedades",
      "examples": ["userId", "gameState", "connectionStatus"]
    },
    "constants": {
      "pattern": "^[A-Z][A-Z0-9_]*$",
      "description": "UPPER_CASE para constantes",
      "examples": ["MAX_PLAYERS", "DEFAULT_TIMEOUT", "API_VERSION"]
    }
  },
  "typeCategories": {
    "core": {
      "description": "Tipos fundamentales del sistema",
      "files": [
        "core/module.d.ts",
        "core/events.d.ts",
        "core/config.d.ts"
      ],
      "priority": "critical"
    },
    "metaverse": {
      "description": "Tipos específicos del metaverso",
      "files": [
        "metaverso/avatar.d.ts",
        "metaverso/scene.d.ts",
        "metaverso/interaction.d.ts"
      ],
      "priority": "high"
    },
    "blockchain": {
      "description": "Tipos relacionados con blockchain",
      "files": [
        "blockchain/nft.d.ts",
        "blockchain/token.d.ts",
        "blockchain/transaction.d.ts"
      ],
      "priority": "high"
    },
    "ui": {
      "description": "Tipos de interfaz de usuario",
      "files": [
        "ui/component.d.ts",
        "ui/event.d.ts",
        "ui/props.d.ts"
      ],
      "priority": "medium"
    },
    "api": {
      "description": "Tipos de API y comunicación",
      "files": [
        "api/request.d.ts",
        "api/response.d.ts",
        "api/error.d.ts"
      ],
      "priority": "medium"
    },
    "assets": {
      "description": "Tipos de gestión de recursos",
      "files": [
        "assets/material.d.ts",
        "assets/model.d.ts",
        "assets/texture.d.ts"
      ],
      "priority": "medium"
    },
    "audio": {
      "description": "Tipos de audio y música",
      "files": [
        "audio/audio-engine.d.ts",
        "audio/music.d.ts",
        "audio/sound.d.ts"
      ],
      "priority": "low"
    },
    "analytics": {
      "description": "Tipos de análisis y métricas",
      "files": [
        "analytics/events.d.ts",
        "analytics/metrics.d.ts",
        "analytics/reports.d.ts"
      ],
      "priority": "low"
    },
    "utilities": {
      "description": "Tipos de utilidades y helpers",
      "files": [
        "utilities/config.d.ts",
        "utilities/format.d.ts",
        "utilities/plugin.d.ts"
      ],
      "priority": "low"
    }
  },
  "validationRules": {
    "syntax": {
      "enabled": true,
      "severity": "error",
      "description": "Validación de sintaxis TypeScript"
    },
    "naming": {
      "enabled": true,
      "severity": "warning",
      "description": "Validación de convenciones de nomenclatura"
    },
    "documentation": {
      "enabled": true,
      "severity": "warning",
      "description": "Validación de documentación JSDoc"
    },
    "imports": {
      "enabled": true,
      "severity": "warning",
      "description": "Validación de imports y exports"
    },
    "unused": {
      "enabled": true,
      "severity": "warning",
      "description": "Detección de tipos no utilizados"
    },
    "circular": {
      "enabled": true,
      "severity": "error",
      "description": "Detección de dependencias circulares"
    }
  },
  "generationSettings": {
    "outputFormat": "declaration",
    "includeComments": true,
    "includeExamples": true,
    "includeDeprecated": false,
    "sortProperties": true,
    "groupByCategory": true,
    "generateIndex": true,
    "generateReadme": true
  },
  "dependencies": {
    "required": [
      "typescript",
      "@types/node"
    ],
    "optional": [
      "@types/three",
      "@types/react",
      "@types/express"
    ],
    "peer": [
      "three",
      "react",
      "express"
    ]
  },
  "fileTemplates": {
    "interface": {
      "header": [
        "/**",
        " * {description}",
        " *",
        " * @since {version}",
        " * @author {author}",
        " */"
      ],
      "structure": [
        "export interface {name} {",
        "  // Properties",
        "}"
      ]
    },
    "type": {
      "header": [
        "/**",
        " * {description}",
        " *",
        " * @since {version}",
        " */"
      ],
      "structure": [
        "export type {name} = {",
        "  // Type definition",
        "};"
      ]
    },
    "enum": {
      "header": [
        "/**",
        " * {description}",
        " *",
        " * @since {version}",
        " */"
      ],
      "structure": [
        "export enum {name} {",
        "  // Enum members",
        "}"
      ]
    }
  },
  "examples": {
    "UserProfile": {
      "interface": {
        "name": "UserProfile",
        "description": "Perfil de usuario del metaverso",
        "properties": {
          "id": "string",
          "username": "string",
          "avatar": "AvatarConfig",
          "preferences": "UserPreferences",
          "createdAt": "Date",
          "lastLogin": "Date"
        }
      }
    },
    "GameState": {
      "enum": {
        "name": "GameState",
        "description": "Estados posibles del juego",
        "members": {
          "LOADING": "Cargando recursos",
          "MENU": "En menú principal",
          "PLAYING": "Jugando",
          "PAUSED": "Pausado",
          "GAME_OVER": "Juego terminado"
        }
      }
    },
    "ApiResponse": {
      "type": {
        "name": "ApiResponse<T>",
        "description": "Respuesta genérica de API",
        "definition": "{\n  success: boolean;\n  data?: T;\n  error?: string;\n  timestamp: Date;\n}"
      }
    }
  },
  "scripts": {
    "generate": "python TypeGenerator.py",
    "validate": "node TypeValidator.js",
    "build": "tsc --declaration --emitDeclarationOnly",
    "clean": "rm -rf dist/*.d.ts",
    "test": "jest --testPathPattern=@types",
    "lint": "eslint @types/**/*.ts",
    "format": "prettier --write @types/**/*.ts"
  },
  "monitoring": {
    "enabled": true,
    "metrics": [
      "typeCount",
      "interfaceCount",
      "enumCount",
      "importCount",
      "exportCount",
      "errorCount",
      "warningCount"
    ],
    "alerts": {
      "errorThreshold": 5,
      "warningThreshold": 20,
      "unusedTypesThreshold": 10
    }
  }
} 