[tool.poetry]
name = "metaverso-config"
version = "1.0.0"
description = "Configuración centralizada para el Metaverso Crypto World Virtual 3D - Sistema de configuración, gestión de redes blockchain, contratos inteligentes y entornos de desarrollo"
authors = ["Metaverso Team <team@metaverso.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
# Configuración y gestión
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
python-dotenv = "^1.0.0"
pyyaml = "^6.0.1"
toml = "^0.10.2"
click = "^8.1.7"

# Blockchain y Web3
web3 = "^6.11.0"
eth-account = "^0.9.0"
eth-utils = "^2.2.0"
eth-typing = "^3.5.0"
eth-hash = "^0.5.2"

# Utilidades de desarrollo
requests = "^2.31.0"
aiohttp = "^3.9.1"
asyncio = "^3.4.3"
cryptography = "^41.0.8"
hashlib = "^3.2"

# Validación y testing
jsonschema = "^4.20.0"
cerberus = "^1.3.5"
marshmallow = "^3.20.1"

# Logging y monitoreo
structlog = "^23.2.0"
rich = "^13.7.0"
colorama = "^0.4.6"

# Utilidades de sistema
pathlib = "^1.0.1"
typing-extensions = "^4.9.0"
dataclasses-json = "^0.6.3"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.4"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"

# Linting y formateo
black = "^23.12.1"
isort = "^5.13.2"
flake8 = "^6.1.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"

# Documentación
sphinx = "^7.2.6"
sphinx-rtd-theme = "^2.0.0"
myst-parser = "^2.0.0"

# Desarrollo
ipython = "^8.18.1"
jupyter = "^1.0.0"
notebook = "^7.0.6"

[tool.poetry.group.prod.dependencies]
# Producción
gunicorn = "^21.2.0"
uvicorn = "^0.25.0"
fastapi = "^0.104.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
