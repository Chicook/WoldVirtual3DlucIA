openapi: 3.0.3
info:
  title: Metaverso Web3 API
  description: API Federation para el ecosistema modular de metaverso Web3
  version: 1.0.0
  contact:
    name: Metaverso Team
    email: api@metaverso.dev
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.metaverso.dev/v1
    description: Production server
  - url: https://staging-api.metaverso.dev/v1
    description: Staging server
  - url: https://canary-api.metaverso.dev/v1
    description: Canary server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # 游깴 WORLDS API
  /worlds:
    get:
      summary: Listar mundos virtuales
      description: Obtiene la lista de mundos virtuales disponibles
      operationId: listWorlds
      parameters:
        - name: page
          in: query
          description: N칰mero de p치gina
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: L칤mite de resultados por p치gina
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: category
          in: query
          description: Filtrar por categor칤a
          required: false
          schema:
            type: string
            enum: [gaming, social, business, education, art]
      responses:
        '200':
          description: Lista de mundos obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorldListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Crear nuevo mundo virtual
      description: Crea un nuevo mundo virtual en el metaverso
      operationId: createWorld
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorldRequest'
      responses:
        '201':
          description: Mundo creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /worlds/{worldId}:
    get:
      summary: Obtener mundo por ID
      description: Obtiene informaci칩n detallada de un mundo virtual espec칤fico
      operationId: getWorld
      parameters:
        - name: worldId
          in: path
          required: true
          description: ID 칰nico del mundo
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Mundo obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # 游녻 USERS API
  /users/{userId}:
    get:
      summary: Obtener perfil de usuario
      description: Obtiene el perfil completo de un usuario
      operationId: getUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          description: ID 칰nico del usuario
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Perfil obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          $ref: '#/components/responses/NotFound'

  # 游꿡 SESSIONS API
  /sessions:
    post:
      summary: Crear sesi칩n de juego
      description: Crea una nueva sesi칩n de juego en un mundo virtual
      operationId: createSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
      responses:
        '201':
          description: Sesi칩n creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # 游눯 ECONOMY API
  /economy/transactions:
    get:
      summary: Obtener transacciones econ칩micas
      description: Obtiene el historial de transacciones econ칩micas
      operationId: getTransactions
      parameters:
        - name: userId
          in: query
          description: Filtrar por usuario
          required: false
          schema:
            type: string
            format: uuid
        - name: worldId
          in: query
          description: Filtrar por mundo
          required: false
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          description: Tipo de transacci칩n
          required: false
          schema:
            type: string
            enum: [purchase, sale, transfer, reward]
      responses:
        '200':
          description: Transacciones obtenidas exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionList'

  # 游꿛 ASSETS API
  /assets:
    get:
      summary: Listar assets disponibles
      description: Obtiene la lista de assets 3D disponibles
      operationId: listAssets
      parameters:
        - name: category
          in: query
          description: Categor칤a del asset
          required: false
          schema:
            type: string
            enum: [building, character, vehicle, prop, environment]
        - name: format
          in: query
          description: Formato del asset
          required: false
          schema:
            type: string
            enum: [gltf, usdz, fbx, obj]
      responses:
        '200':
          description: Assets obtenidos exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetList'

components:
  schemas:
    # 游깴 World Schemas
    World:
      type: object
      required:
        - id
        - name
        - description
        - owner
        - status
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: ID 칰nico del mundo
        name:
          type: string
          maxLength: 100
          description: Nombre del mundo
        description:
          type: string
          maxLength: 1000
          description: Descripci칩n del mundo
        owner:
          type: string
          format: uuid
          description: ID del propietario
        status:
          type: string
          enum: [draft, published, archived]
          description: Estado del mundo
        category:
          type: string
          enum: [gaming, social, business, education, art]
          description: Categor칤a del mundo
        metadata:
          type: object
          description: Metadatos adicionales
        capacity:
          type: integer
          minimum: 1
          maximum: 10000
          description: Capacidad m치xima de usuarios
        currentUsers:
          type: integer
          minimum: 0
          description: Usuarios actuales
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateWorldRequest:
      type: object
      required:
        - name
        - description
        - category
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 1000
        category:
          type: string
          enum: [gaming, social, business, education, art]
        capacity:
          type: integer
          minimum: 1
          maximum: 10000
          default: 100
        metadata:
          type: object

    WorldListResponse:
      type: object
      properties:
        worlds:
          type: array
          items:
            $ref: '#/components/schemas/World'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # 游녻 User Schemas
    UserProfile:
      type: object
      required:
        - id
        - username
        - email
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
        avatar:
          type: string
          format: uri
        walletAddress:
          type: string
          pattern: '^0x[a-fA-F0-9]{40}$'
        reputation:
          type: number
          minimum: 0
          maximum: 100
        createdAt:
          type: string
          format: date-time
        lastActive:
          type: string
          format: date-time

    # 游꿡 Session Schemas
    CreateSessionRequest:
      type: object
      required:
        - worldId
        - userId
      properties:
        worldId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        settings:
          type: object

    GameSession:
      type: object
      required:
        - id
        - worldId
        - userId
        - status
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        worldId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        status:
          type: string
          enum: [active, paused, ended]
        position:
          $ref: '#/components/schemas/Vector3'
        createdAt:
          type: string
          format: date-time
        lastActivity:
          type: string
          format: date-time

    # 游눯 Economy Schemas
    Transaction:
      type: object
      required:
        - id
        - type
        - amount
        - currency
        - from
        - to
        - timestamp
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [purchase, sale, transfer, reward]
        amount:
          type: number
          minimum: 0
        currency:
          type: string
          enum: [ETH, USDC, METAVERSE_TOKEN]
        from:
          type: string
          format: uuid
        to:
          type: string
          format: uuid
        worldId:
          type: string
          format: uuid
        assetId:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        txHash:
          type: string
          pattern: '^0x[a-fA-F0-9]{64}$'

    TransactionList:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # 游꿛 Asset Schemas
    Asset:
      type: object
      required:
        - id
        - name
        - category
        - format
        - url
        - hash
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 100
        category:
          type: string
          enum: [building, character, vehicle, prop, environment]
        format:
          type: string
          enum: [gltf, usdz, fbx, obj]
        url:
          type: string
          format: uri
        hash:
          type: string
          pattern: '^[a-fA-F0-9]{64}$'
        metadata:
          type: object
        price:
          type: number
          minimum: 0
        owner:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time

    AssetList:
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # 游늵 Common Schemas
    Vector3:
      type: object
      required:
        - x
        - y
        - z
      properties:
        x:
          type: number
        y:
          type: number
        z:
          type: number

    Pagination:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 0

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object

  responses:
    BadRequest:
      description: Solicitud incorrecta
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 'BAD_REQUEST'
            message: 'Los datos proporcionados son inv치lidos'
            details:
              field: 'name'
              reason: 'El nombre es requerido'

    Unauthorized:
      description: No autorizado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 'UNAUTHORIZED'
            message: 'Token de autenticaci칩n requerido'

    Forbidden:
      description: Acceso prohibido
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 'FORBIDDEN'
            message: 'No tienes permisos para realizar esta acci칩n'

    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 'NOT_FOUND'
            message: 'El recurso solicitado no existe'

    InternalServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 'INTERNAL_ERROR'
            message: 'Ha ocurrido un error interno'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token JWT para autenticaci칩n

    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API Key para acceso program치tico