/**
 * Ejemplo b√°sico de uso de WCV Blockchain
 * 
 * Este archivo muestra c√≥mo:
 * 1. Conectar a la blockchain WCV
 * 2. Interactuar con el token WCV
 * 3. Usar el bridge para transferir tokens
 * 4. Obtener informaci√≥n de la red
 */

const { ethers } = require("ethers");
const fs = require("fs");
const path = require("path");

// Configuraci√≥n
const CONFIG = {
    rpcUrl: "http://127.0.0.1:8545",
    chainId: 31337,
    privateKey: process.env.PRIVATE_KEY || "0x0000000000000000000000000000000000000000000000000000000000000000"
};

class WCVExample {
    constructor() {
        this.provider = null;
        this.wallet = null;
        this.wcvToken = null;
        this.wcvBridge = null;
        this.deploymentInfo = null;
    }

    /**
     * Inicializar conexi√≥n
     */
    async initialize() {
        console.log("üöÄ Inicializando WCV Blockchain Example...");
        
        try {
            // Conectar al provider
            this.provider = new ethers.JsonRpcProvider(CONFIG.rpcUrl);
            console.log("‚úÖ Conectado al provider");
            
            // Crear wallet
            this.wallet = new ethers.Wallet(CONFIG.privateKey, this.provider);
            console.log(`‚úÖ Wallet creado: ${this.wallet.address}`);
            
            // Cargar informaci√≥n de deployment
            await this.loadDeploymentInfo();
            
            // Crear instancias de contratos
            await this.createContractInstances();
            
            console.log("‚úÖ Inicializaci√≥n completada");
            
        } catch (error) {
            console.error("‚ùå Error en inicializaci√≥n:", error);
            throw error;
        }
    }

    /**
     * Cargar informaci√≥n de deployment
     */
    async loadDeploymentInfo() {
        try {
            const deploymentFile = path.join(__dirname, "../deployments/wcvLocal.json");
            
            if (fs.existsSync(deploymentFile)) {
                this.deploymentInfo = JSON.parse(fs.readFileSync(deploymentFile, "utf8"));
                console.log("‚úÖ Informaci√≥n de deployment cargada");
            } else {
                console.warn("‚ö†Ô∏è Archivo de deployment no encontrado, usando valores por defecto");
                this.deploymentInfo = {
                    contracts: {
                        WCVToken: { address: "0x0000000000000000000000000000000000000000" },
                        WCVBridge: { address: "0x0000000000000000000000000000000000000000" }
                    }
                };
            }
        } catch (error) {
            console.error("Error cargando deployment info:", error);
            throw error;
        }
    }

    /**
     * Crear instancias de contratos
     */
    async createContractInstances() {
        try {
            // ABI b√°sico para el token
            const tokenABI = [
                "function name() view returns (string)",
                "function symbol() view returns (string)",
                "function decimals() view returns (uint8)",
                "function totalSupply() view returns (uint256)",
                "function balanceOf(address) view returns (uint256)",
                "function transfer(address, uint256) returns (bool)",
                "function mint(address, uint256) payable",
                "function burn(uint256)",
                "function getTokenStats() view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256)"
            ];

            // ABI b√°sico para el bridge
            const bridgeABI = [
                "function getBridgeStats() view returns (uint256, uint256, uint256, uint256, uint256)",
                "function bridgeToBSC(address, uint256) payable",
                "function createBSCToWCVRequest(address, address, uint256, bytes32)"
            ];

            // Crear instancia del token
            this.wcvToken = new ethers.Contract(
                this.deploymentInfo.contracts.WCVToken.address,
                tokenABI,
                this.wallet
            );

            // Crear instancia del bridge
            this.wcvBridge = new ethers.Contract(
                this.deploymentInfo.contracts.WCVBridge.address,
                bridgeABI,
                this.wallet
            );

            console.log("‚úÖ Instancias de contratos creadas");
        } catch (error) {
            console.error("Error creando instancias de contratos:", error);
            throw error;
        }
    }

    /**
     * Obtener informaci√≥n de la red
     */
    async getNetworkInfo() {
        try {
            console.log("\nüìä Informaci√≥n de la Red:");
            
            const network = await this.provider.getNetwork();
            const blockNumber = await this.provider.getBlockNumber();
            const balance = await this.provider.getBalance(this.wallet.address);
            
            console.log(`   Chain ID: ${network.chainId}`);
            console.log(`   Block Number: ${blockNumber}`);
            console.log(`   Wallet Balance: ${ethers.formatEther(balance)} ETH`);
            
            return { network, blockNumber, balance };
        } catch (error) {
            console.error("Error obteniendo informaci√≥n de red:", error);
            throw error;
        }
    }

    /**
     * Obtener informaci√≥n del token
     */
    async getTokenInfo() {
        try {
            console.log("\nü™ô Informaci√≥n del Token WCV:");
            
            const [name, symbol, decimals, totalSupply] = await Promise.all([
                this.wcvToken.name(),
                this.wcvToken.symbol(),
                this.wcvToken.decimals(),
                this.wcvToken.totalSupply()
            ]);
            
            console.log(`   Nombre: ${name}`);
            console.log(`   S√≠mbolo: ${symbol}`);
            console.log(`   Decimales: ${decimals}`);
            console.log(`   Supply Total: ${ethers.formatUnits(totalSupply, decimals)} ${symbol}`);
            
            return { name, symbol, decimals, totalSupply };
        } catch (error) {
            console.error("Error obteniendo informaci√≥n del token:", error);
            throw error;
        }
    }

    /**
     * Obtener balance del token
     */
    async getTokenBalance(address = null) {
        try {
            const targetAddress = address || this.wallet.address;
            const balance = await this.wcvToken.balanceOf(targetAddress);
            const decimals = await this.wcvToken.decimals();
            const symbol = await this.wcvToken.symbol();
            
            console.log(`\nüí∞ Balance de ${symbol}:`);
            console.log(`   Direcci√≥n: ${targetAddress}`);
            console.log(`   Balance: ${ethers.formatUnits(balance, decimals)} ${symbol}`);
            
            return { address: targetAddress, balance, symbol, decimals };
        } catch (error) {
            console.error("Error obteniendo balance del token:", error);
            throw error;
        }
    }

    /**
     * Obtener estad√≠sticas del token
     */
    async getTokenStats() {
        try {
            console.log("\nüìà Estad√≠sticas del Token:");
            
            const stats = await this.wcvToken.getTokenStats();
            const decimals = await this.wcvToken.decimals();
            const symbol = await this.wcvToken.symbol();
            
            console.log(`   Supply Total: ${ethers.formatUnits(stats[0], decimals)} ${symbol}`);
            console.log(`   Total Minted: ${ethers.formatUnits(stats[1], decimals)} ${symbol}`);
            console.log(`   Total Burned: ${ethers.formatUnits(stats[2], decimals)} ${symbol}`);
            console.log(`   Transacciones: ${stats[3]}`);
            console.log(`   Fee de Minting: ${ethers.formatEther(stats[4])} ETH`);
            console.log(`   Fee de Transferencia: ${stats[5]} basis points`);
            console.log(`   L√≠mite M√°ximo: ${ethers.formatUnits(stats[6], decimals)} ${symbol}`);
            
            return stats;
        } catch (error) {
            console.error("Error obteniendo estad√≠sticas del token:", error);
            throw error;
        }
    }

    /**
     * Transferir tokens
     */
    async transferTokens(to, amount) {
        try {
            console.log(`\nüîÑ Transferiendo ${amount} WCV a ${to}...`);
            
            const decimals = await this.wcvToken.decimals();
            const amountWei = ethers.parseUnits(amount, decimals);
            
            const tx = await this.wcvToken.transfer(to, amountWei);
            console.log(`   Transacci√≥n enviada: ${tx.hash}`);
            
            const receipt = await tx.wait();
            console.log(`   Transacci√≥n confirmada en bloque: ${receipt.blockNumber}`);
            
            return { tx, receipt };
        } catch (error) {
            console.error("Error transfiriendo tokens:", error);
            throw error;
        }
    }

    /**
     * Acu√±ar tokens (solo si es minter)
     */
    async mintTokens(to, amount) {
        try {
            console.log(`\nü™ô Acu√±ando ${amount} WCV para ${to}...`);
            
            const decimals = await this.wcvToken.decimals();
            const amountWei = ethers.parseUnits(amount, decimals);
            const mintingFee = ethers.parseEther("0.001"); // 0.001 ETH
            
            const tx = await this.wcvToken.mint(to, amountWei, { value: mintingFee });
            console.log(`   Transacci√≥n enviada: ${tx.hash}`);
            
            const receipt = await tx.wait();
            console.log(`   Tokens acu√±ados en bloque: ${receipt.blockNumber}`);
            
            return { tx, receipt };
        } catch (error) {
            console.error("Error acu√±ando tokens:", error);
            throw error;
        }
    }

    /**
     * Quemar tokens
     */
    async burnTokens(amount) {
        try {
            console.log(`\nüî• Quemando ${amount} WCV...`);
            
            const decimals = await this.wcvToken.decimals();
            const amountWei = ethers.parseUnits(amount, decimals);
            
            const tx = await this.wcvToken.burn(amountWei);
            console.log(`   Transacci√≥n enviada: ${tx.hash}`);
            
            const receipt = await tx.wait();
            console.log(`   Tokens quemados en bloque: ${receipt.blockNumber}`);
            
            return { tx, receipt };
        } catch (error) {
            console.error("Error quemando tokens:", error);
            throw error;
        }
    }

    /**
     * Obtener estad√≠sticas del bridge
     */
    async getBridgeStats() {
        try {
            console.log("\nüåâ Estad√≠sticas del Bridge:");
            
            const stats = await this.wcvBridge.getBridgeStats();
            
            console.log(`   Total Requests: ${stats[0]}`);
            console.log(`   Current Daily Amount: ${ethers.formatUnits(stats[1], 3)} WCV`);
            console.log(`   Daily Limit: ${ethers.formatUnits(stats[2], 3)} WCV`);
            console.log(`   Bridge Fee: ${ethers.formatEther(stats[3])} ETH`);
            console.log(`   Last Reset: ${new Date(stats[4] * 1000).toISOString()}`);
            
            return stats;
        } catch (error) {
            console.error("Error obteniendo estad√≠sticas del bridge:", error);
            throw error;
        }
    }

    /**
     * Ejecutar ejemplo completo
     */
    async runExample() {
        try {
            console.log("üéØ Ejecutando ejemplo completo de WCV Blockchain...\n");
            
            // 1. Obtener informaci√≥n de la red
            await this.getNetworkInfo();
            
            // 2. Obtener informaci√≥n del token
            await this.getTokenInfo();
            
            // 3. Obtener balance inicial
            await this.getTokenBalance();
            
            // 4. Obtener estad√≠sticas del token
            await this.getTokenStats();
            
            // 5. Obtener estad√≠sticas del bridge
            await this.getBridgeStats();
            
            // 6. Ejemplo de transferencia (comentado para evitar errores)
            // const recipient = "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6";
            // await this.transferTokens(recipient, "100");
            
            // 7. Ejemplo de minting (comentado para evitar errores)
            // await this.mintTokens(this.wallet.address, "1000");
            
            // 8. Ejemplo de burning (comentado para evitar errores)
            // await this.burnTokens("100");
            
            console.log("\n‚úÖ Ejemplo completado exitosamente!");
            console.log("\nüí° Para ejecutar transferencias, minting o burning:");
            console.log("   1. Descomenta las l√≠neas correspondientes");
            console.log("   2. Aseg√∫rate de tener suficiente ETH para gas");
            console.log("   3. Verifica que tengas permisos de minter si vas a acu√±ar");
            
        } catch (error) {
            console.error("‚ùå Error ejecutando ejemplo:", error);
        }
    }
}

// Funci√≥n principal
async function main() {
    const example = new WCVExample();
    
    try {
        await example.initialize();
        await example.runExample();
    } catch (error) {
        console.error("‚ùå Error en el ejemplo:", error);
        process.exit(1);
    }
}

// Ejecutar si es el archivo principal
if (require.main === module) {
    main();
}

module.exports = { WCVExample }; 