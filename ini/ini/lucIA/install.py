"""
Script de instalaci√≥n para LucIA - IA de la Plataforma Metaverso
"""

import subprocess
import sys
import os
from pathlib import Path

def install_dependencies():
    """Instala las dependencias necesarias"""
    print("üì¶ Instalando dependencias...")
    
    # Dependencias b√°sicas
    basic_deps = [
        "aiohttp==3.9.1",
        "requests==2.31.0",
        "python-dotenv==1.0.0",
        "loguru==0.7.2",
        "rich==13.7.0"
    ]
    
    # Dependencias opcionales (APIs)
    optional_deps = [
        "openai==1.3.7",
        "anthropic==0.7.8",
        "google-generativeai==0.3.2"
    ]
    
    # Dependencias de NLP (opcionales)
    nlp_deps = [
        "nltk==3.8.1",
        "textblob==0.17.1"
    ]
    
    all_deps = basic_deps + optional_deps + nlp_deps
    
    for dep in all_deps:
        try:
            print(f"  Instalando {dep}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
        except subprocess.CalledProcessError as e:
            print(f"  ‚ö†Ô∏è  Error instalando {dep}: {e}")
            continue
    
    print("‚úÖ Dependencias instaladas")

def create_directories():
    """Crea los directorios necesarios"""
    print("üìÅ Creando directorios...")
    
    directories = [
        "lucia_learning",
        "lucia_learning/backups",
        "lucia_learning/exports",
        "config",
        "logs"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"  ‚úÖ Creado: {directory}")
    
    print("‚úÖ Directorios creados")

def create_env_example():
    """Crea archivo de ejemplo de variables de entorno"""
    print("üîß Creando archivo de configuraci√≥n...")
    
    env_content = """# Configuraci√≥n de APIs para LucIA
# Descomenta y configura las APIs que quieras usar

# OpenAI (opcional)
# OPENAI_API_KEY=tu_clave_openai_aqui

# Anthropic (opcional)
# ANTHROPIC_API_KEY=tu_clave_anthropic_aqui

# Google Gemini (opcional)
# GEMINI_API_KEY=tu_clave_gemini_aqui

# HuggingFace (gratuita, recomendada)
# HUGGINGFACE_API_KEY=tu_clave_huggingface_aqui

# Configuraci√≥n de la IA
LUCIA_NAME=LucIA
LUCIA_PERSONALITY=metaverse
LUCIA_ENABLE_MEMORY=true
LUCIA_ENABLE_PARAPHRASING=true
"""
    
    with open(".env.example", "w", encoding="utf-8") as f:
        f.write(env_content)
    
    print("‚úÖ Archivo .env.example creado")

def test_installation():
    """Prueba la instalaci√≥n"""
    print("üß™ Probando instalaci√≥n...")
    
    try:
        # Probar imports
        import aiohttp
        import requests
        from dotenv import load_dotenv
        
        print("  ‚úÖ Imports b√°sicos funcionando")
        
        # Probar configuraci√≥n
        from config import config
        print("  ‚úÖ Configuraci√≥n cargada")
        
        # Probar memoria
        from memory import MemoryManager
        memory = MemoryManager()
        print("  ‚úÖ Sistema de memoria funcionando")
        
        # Probar paraphraser
        from paraphraser import Paraphraser, ParaphraseConfig
        from config import PersonalityType
        paraphraser = Paraphraser(ParaphraseConfig(personality=PersonalityType.METAVERSE))
        print("  ‚úÖ Sistema de parafraseo funcionando")
        
        print("‚úÖ Instalaci√≥n completada exitosamente!")
        return True
        
    except ImportError as e:
        print(f"  ‚ùå Error de importaci√≥n: {e}")
        return False
    except Exception as e:
        print(f"  ‚ùå Error en prueba: {e}")
        return False

def show_next_steps():
    """Muestra los siguientes pasos"""
    print("\n" + "="*60)
    print("üéØ PR√ìXIMOS PASOS:")
    print("="*60)
    print("1. üìù Configura las APIs (opcional):")
    print("   ‚Ä¢ Copia .env.example a .env")
    print("   ‚Ä¢ A√±ade tus claves de API")
    print("   ‚Ä¢ Las APIs gratuitas funcionan sin configuraci√≥n")
    print()
    print("2. üöÄ Ejecuta LucIA:")
    print("   ‚Ä¢ python lucIA.py")
    print()
    print("3. üéÆ Comandos √∫tiles:")
    print("   ‚Ä¢ 'ayuda' - Ver todos los comandos")
    print("   ‚Ä¢ 'stats' - Ver estad√≠sticas")
    print("   ‚Ä¢ 'personalidad metaverse' - Cambiar personalidad")
    print()
    print("4. üåê APIs gratuitas disponibles:")
    print("   ‚Ä¢ HuggingFace (configurada por defecto)")
    print("   ‚Ä¢ Respuestas locales inteligentes")
    print()
    print("5. üí° Caracter√≠sticas principales:")
    print("   ‚Ä¢ Rotaci√≥n autom√°tica de APIs")
    print("   ‚Ä¢ Memoria persistente con parafraseo")
    print("   ‚Ä¢ Fallback a memoria cuando se agotan las APIs")
    print("   ‚Ä¢ Personalidades configurables")
    print("="*60)

def main():
    """Funci√≥n principal de instalaci√≥n"""
    print("üöÄ Instalador de LucIA Pro - IA del Metaverso")
    print("=" * 50)
    
    # Instalar dependencias
    install_dependencies()
    
    # Crear directorios
    create_directories()
    
    # Crear archivo de configuraci√≥n
    create_env_example()
    
    # Probar instalaci√≥n
    if test_installation():
        show_next_steps()
    else:
        print("\n‚ùå Error en la instalaci√≥n. Revisa los errores anteriores.")

if __name__ == "__main__":
    main() 