{
  "metadata": {
    "total_snippets": 23,
    "last_updated": "2025-07-05T22:01:30.454685",
    "version": "1.0.0"
  },
  "snippets": [
    {
      "id": "threejs_basics_escena_básica_three.js_20250705_214150",
      "title": "Escena Básica Three.js",
      "description": "Ejemplo completo de una escena básica con un cubo rotatorio",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "// Crear escena básica de Three.js\nimport * as THREE from 'three';\n\n// Configurar escena\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\nconst renderer = new THREE.WebGLRenderer();\n\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// Crear geometría\nconst geometry = new THREE.BoxGeometry();\nconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\nconst cube = new THREE.Mesh(geometry, material);\nscene.add(cube);\n\ncamera.position.z = 5;\n\n// Función de animación\nfunction animate() {\n    requestAnimationFrame(animate);\n    cube.rotation.x += 0.01;\n    cube.rotation.y += 0.01;\n    renderer.render(scene, camera);\n}\nanimate();",
      "tags": [
        "threejs",
        "básico",
        "escena",
        "cubo",
        "animación"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:41:50.540187",
      "updated_at": "2025-07-05T21:41:50.540187",
      "version": "1.0.0",
      "dependencies": [
        "three"
      ],
      "usage_examples": [
        "Aprender conceptos básicos de Three.js",
        "Crear primera escena 3D"
      ],
      "performance_notes": "",
      "difficulty_level": "beginner",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_crear_geometría_del_avatar_20250705_214150",
      "title": "Crear geometría del avatar",
      "description": "Creación de avatar 3D en Three.js",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "// Crear geometría del avatar\n    const avatarGeometry = new THREE.CylinderGeometry(0.5, 0.5, 2, 8);\n    const avatarMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00 });\n    const avatar = new THREE.Mesh(avatarGeometry, avatarMaterial);\n    \n    // Añadir a la escena\n    scene.add(avatar);\n    \n    // Función de animación\n    function animateAvatar() {\n        avatar.rotation.y += 0.01;\n        requestAnimationFrame(animateAvatar);\n    }\n    animateAvatar();",
      "tags": [
        "material",
        "avatarMaterial",
        "animation",
        "three.js",
        "threejs_basics",
        "avatar",
        "scene",
        "animateAvatar",
        "avatarGeometry",
        "geometry",
        "mesh"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:41:50.578095",
      "updated_at": "2025-07-05T21:41:50.578095",
      "version": "1.0.0",
      "dependencies": [],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_crear_suelo_20250705_214150",
      "title": "Crear suelo",
      "description": "Creación de avatar 3D en Three.js",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "// Crear suelo\n    const groundGeometry = new THREE.PlaneGeometry(10, 10);\n    const groundMaterial = new THREE.MeshBasicMaterial({ color: 0x808080 });\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n    ground.rotation.x = -Math.PI / 2;\n    scene.add(ground);",
      "tags": [
        "material",
        "groundMaterial",
        "avatar",
        "three.js",
        "threejs_basics",
        "ground",
        "scene",
        "groundGeometry",
        "geometry",
        "mesh"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:41:50.584081",
      "updated_at": "2025-07-05T21:41:50.584081",
      "version": "1.0.0",
      "dependencies": [],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_creación_avatar_-_threejs_basics_20250705_214150",
      "title": "Creación avatar - Threejs Basics",
      "description": "Creación de avatar 3D en Three.js",
      "category": "threejs_basics",
      "language": "python",
      "code": "thon\n    import numpy as np\n    \n    def process_avatar_data(data):\n        # Procesar datos del avatar\n        processed = np.array(data)\n        return processed.mean()",
      "tags": [
        "three.js",
        "threejs_basics",
        "avatar"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:41:50.591437",
      "updated_at": "2025-07-05T21:41:50.591437",
      "version": "1.0.0",
      "dependencies": [
        "numpy"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_escena_básica_three.js_20250705_214211",
      "title": "Escena Básica Three.js",
      "description": "Ejemplo completo de una escena básica con un cubo rotatorio",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "// Crear escena básica de Three.js\nimport * as THREE from 'three';\n\n// Configurar escena\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\nconst renderer = new THREE.WebGLRenderer();\n\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// Crear geometría\nconst geometry = new THREE.BoxGeometry();\nconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\nconst cube = new THREE.Mesh(geometry, material);\nscene.add(cube);\n\ncamera.position.z = 5;\n\n// Función de animación\nfunction animate() {\n    requestAnimationFrame(animate);\n    cube.rotation.x += 0.01;\n    cube.rotation.y += 0.01;\n    renderer.render(scene, camera);\n}\nanimate();",
      "tags": [
        "threejs",
        "básico",
        "escena",
        "cubo",
        "animación"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:42:11.622488",
      "updated_at": "2025-07-05T21:42:11.622488",
      "version": "1.0.0",
      "dependencies": [
        "three"
      ],
      "usage_examples": [
        "Aprender conceptos básicos de Three.js",
        "Crear primera escena 3D"
      ],
      "performance_notes": "",
      "difficulty_level": "beginner",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_crear_geometría_del_avatar_20250705_214211",
      "title": "Crear geometría del avatar",
      "description": "Creación de avatar 3D en Three.js",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "// Crear geometría del avatar\n    const avatarGeometry = new THREE.CylinderGeometry(0.5, 0.5, 2, 8);\n    const avatarMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00 });\n    const avatar = new THREE.Mesh(avatarGeometry, avatarMaterial);\n    \n    // Añadir a la escena\n    scene.add(avatar);\n    \n    // Función de animación\n    function animateAvatar() {\n        avatar.rotation.y += 0.01;\n        requestAnimationFrame(animateAvatar);\n    }\n    animateAvatar();",
      "tags": [
        "mesh",
        "avatarMaterial",
        "threejs_basics",
        "animateAvatar",
        "three.js",
        "material",
        "scene",
        "animation",
        "geometry",
        "avatar",
        "avatarGeometry"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:42:11.649561",
      "updated_at": "2025-07-05T21:42:11.649561",
      "version": "1.0.0",
      "dependencies": [],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_crear_suelo_20250705_214211",
      "title": "Crear suelo",
      "description": "Creación de avatar 3D en Three.js",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "// Crear suelo\n    const groundGeometry = new THREE.PlaneGeometry(10, 10);\n    const groundMaterial = new THREE.MeshBasicMaterial({ color: 0x808080 });\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n    ground.rotation.x = -Math.PI / 2;\n    scene.add(ground);",
      "tags": [
        "mesh",
        "groundGeometry",
        "threejs_basics",
        "groundMaterial",
        "three.js",
        "material",
        "scene",
        "ground",
        "geometry",
        "avatar"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:42:11.656531",
      "updated_at": "2025-07-05T21:42:11.656531",
      "version": "1.0.0",
      "dependencies": [],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_creación_avatar_-_threejs_basics_20250705_214211",
      "title": "Creación avatar - Threejs Basics",
      "description": "Creación de avatar 3D en Three.js",
      "category": "threejs_basics",
      "language": "python",
      "code": "thon\n    import numpy as np\n    \n    def process_avatar_data(data):\n        # Procesar datos del avatar\n        processed = np.array(data)\n        return processed.mean()",
      "tags": [
        "three.js",
        "avatar",
        "threejs_basics"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:42:11.669500",
      "updated_at": "2025-07-05T21:42:11.669500",
      "version": "1.0.0",
      "dependencies": [
        "numpy"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_módulo_formas_humanas_-_threejs_basics_20250705_214518",
      "title": "Módulo Formas Humanas - Threejs Basics",
      "description": "Módulo 2: Formas Humanas Básicas",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\n// Escena\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize( window.innerWidth, window.innerHeight );\ndocument.body.appendChild( renderer.domElement );\n\n// Controles de cámara\nconst controls = new OrbitControls( camera, renderer.domElement );\n\n// Luz ambiental\nconst ambientLight = new THREE.AmbientLight( 0x404040 ); // Luz suave\nscene.add( ambientLight );\n\n// Luz direccional\nconst directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );\ndirectionalLight.position.set( 1, 1, 1 );\nscene.add( directionalLight );\n\n\n// Cuerpo\nconst bodyGeometry = new THREE.CylinderGeometry( 0.5, 0.5, 1.5, 16 ); // torso\nconst bodyMaterial = new THREE.MeshStandardMaterial( { color: 0x8d5524 } ); // piel\nconst body = new THREE.Mesh( bodyGeometry, bodyMaterial );\nscene.add( body );\n\n\n// Cabeza\nconst headGeometry = new THREE.SphereGeometry( 0.5, 32, 32 );\nconst headMaterial = new THREE.MeshStandardMaterial( { color: 0xffdbac } );\nconst head = new THREE.Mesh( headGeometry, headMaterial );\nhead.position.y = 1.25; // Posición de la cabeza sobre el torso\nscene.add( head );\n\n\n// Brazos\nconst armGeometry = new THREE.CylinderGeometry( 0.15, 0.15, 1, 8 );\nconst armMaterial = new THREE.MeshStandardMaterial( { color: 0x8d5524 } );\n\nconst leftArm = new THREE.Mesh( armGeometry, armMaterial );\nleftArm.position.x = -0.75;\nleftArm.position.y = 0.5;\nscene.add( leftArm );\n\nconst rightArm = new THREE.Mesh( armGeometry, armMaterial );\nrightArm.position.x = 0.75;\nrightArm.position.y = 0.5;\nscene.add( rightArm );\n\n// Piernas\nconst legGeometry = new THREE.CylinderGeometry( 0.2, 0.2, 1.5, 8 );\nconst legMaterial = new THREE.MeshStandardMaterial( { color: 0x2e86ab } ); // azul\n\nconst leftLeg = new THREE.Mesh( legGeometry, legMaterial );\nleftLeg.position.x = -0.3;\nleftLeg.position.y = -1.25;\nscene.add( leftLeg );\n\nconst rightLeg = new THREE.Mesh( legGeometry, legMaterial );\nrightLeg.position.x = 0.3;\nrightLeg.position.y = -1.25;\nscene.add( rightLeg );\n\n\ncamera.position.z = 5;\n\n// Renderizado\nfunction animate() {\n\trequestAnimationFrame( animate );\n\trenderer.render( scene, camera );\n}\n\nanimate();",
      "tags": [
        "scene",
        "rightLeg",
        "controls",
        "rightArm",
        "leftArm",
        "mesh",
        "body",
        "head",
        "headGeometry",
        "directionalLight",
        "animate",
        "ambientLight",
        "leftLeg",
        "headMaterial",
        "bodyGeometry",
        "renderer",
        "material",
        "legGeometry",
        "geometry",
        "threejs_basics",
        "legMaterial",
        "bodyMaterial",
        "armMaterial",
        "armGeometry",
        "camera",
        "animation"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:45:18.915731",
      "updated_at": "2025-07-05T21:45:18.915731",
      "version": "1.0.0",
      "dependencies": [
        "three/examples/jsm/controls/OrbitControls.js",
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_crear_geometrías_básicas_-_threejs_basics_20250705_215813",
      "title": "crear geometrías básicas - Threejs Basics",
      "description": "Pregunta: ¿Cómo crear geometrías básicas para un avatar humano en Three.js?",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "import * as THREE from 'three';\n\nfunction createBodyPart(geometry, material) {\n  const mesh = new THREE.Mesh(geometry, material);\n  return mesh;\n}\n\nfunction createAvatar() {\n  const avatar = new THREE.Group();\n\n  // Material (puedes personalizarlo)\n  const material = new THREE.MeshStandardMaterial({ color: 0x808080 });\n\n  // Cabeza (SphereGeometry)\n  const headGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n  const head = createBodyPart(headGeometry, material);\n  avatar.add(head);\n\n  // Torso (BoxGeometry)\n  const torsoGeometry = new THREE.BoxGeometry(1, 1.5, 0.5);\n  const torso = createBodyPart(torsoGeometry, material);\n  torso.position.y = -1; // Posicion debajo de la cabeza\n  avatar.add(torso);\n\n  // Brazo izquierdo\n  const leftArmGeometry = new THREE.BoxGeometry(0.25, 1, 0.25);\n  const leftArm = createBodyPart(leftArmGeometry, material);\n  leftArm.position.set(-0.75, -0.5, 0); // Posición relativa al torso\n  avatar.add(leftArm);\n\n  // Brazo derecho (similar al izquierdo, cambiando la posición x)\n  const rightArmGeometry = new THREE.BoxGeometry(0.25, 1, 0.25);\n  const rightArm = createBodyPart(rightArmGeometry, material);\n  rightArm.position.set(0.75, -0.5, 0);\n  avatar.add(rightArm);\n\n\n  // Piernas (similar a los brazos, ajustando posición y dimensiones)\n  const legGeometry = new THREE.BoxGeometry(0.25, 1.25, 0.25);\n  const leftLeg = createBodyPart(legGeometry, material);\n  leftLeg.position.set(-0.3, -2, 0);\n  avatar.add(leftLeg);\n\n  const rightLeg = createBodyPart(legGeometry, material);\n  rightLeg.position.set(0.3, -2, 0);\n  avatar.add(rightLeg);\n\n\n  return avatar;\n}\n\n\n// Ejemplo de uso:\nconst avatar = createAvatar();\nscene.add(avatar);",
      "tags": [
        "headGeometry",
        "leftArmGeometry",
        "material",
        "mesh",
        "threejs_basics",
        "avatar",
        "scene",
        "geometry",
        "rightArmGeometry",
        "three.js",
        "rightArm",
        "createAvatar",
        "leftArm",
        "head",
        "torso",
        "leftLeg",
        "createBodyPart",
        "torsoGeometry",
        "legGeometry",
        "rightLeg"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:58:13.626980",
      "updated_at": "2025-07-05T21:58:13.626980",
      "version": "1.0.0",
      "dependencies": [
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_aplicar_materiales_texturas_-_threejs_basics_20250705_215832",
      "title": "aplicar materiales texturas - Threejs Basics",
      "description": "Pregunta: ¿Cómo aplicar materiales y texturas realistas a un avatar 3D?",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "import * as THREE from 'three';\nimport { TextureLoader } from 'three';\n\n// Función para cargar texturas (reutilizable)\nasync function loadTexture(path) {\n  const textureLoader = new TextureLoader();\n  return new Promise((resolve, reject) => {\n    textureLoader.load(path, resolve, undefined, reject);\n  });\n}\n\n\nasync function createAvatarMaterialized() {\n\n    const skinTexture = await loadTexture('ruta/a/textura/piel.jpg'); //  <-  Ruta a tu textura\n    const eyeTexture = await loadTexture('ruta/a/textura/ojos.jpg'); //  <-  Ruta a tu textura\n    const clothesTexture = await loadTexture('ruta/a/textura/ropa.jpg'); //  <-  Ruta a tu textura\n\n\n  const avatar = new THREE.Group();\n\n  // Material de la piel\n  const skinMaterial = new THREE.MeshStandardMaterial({\n    map: skinTexture, // Aplicamos la textura de piel\n    roughness: 0.8, // Ajusta la rugosidad\n    metalness: 0.1, // Ajusta la metalicidad\n  });\n\n  // Material de los ojos\n  const eyeMaterial = new THREE.MeshStandardMaterial({\n    map: eyeTexture,\n    roughness: 0.1, // Ojos más suaves\n    metalness: 0.0,\n  });\n\n  // Material de la ropa\n  const clothesMaterial = new THREE.MeshStandardMaterial({\n    map: clothesTexture,\n    roughness: 0.5,\n    metalness: 0.0,\n  });\n\n\n  // ... (Código para crear la geometría del avatar -  reutilizar el del ejemplo anterior) ...\n\n  // Aplicar los materiales a las partes del cuerpo\n  head.material = skinMaterial;\n  // ... crea la geometría de los ojos y aplica eyeMaterial\n  torso.material = clothesMaterial;\n  leftArm.material = skinMaterial;\n  // ... y así sucesivamente para el resto de las partes\n\n  return avatar;\n}\n\n// Ejemplo de uso:\nasync function init() {\n    const avatar = await createAvatarMaterialized();\n    scene.add(avatar);\n}\n\ninit();",
      "tags": [
        "scene",
        "loadTexture",
        "clothesTexture",
        "init",
        "createAvatarMaterialized",
        "eyeTexture",
        "eyeMaterial",
        "skinTexture",
        "clothesMaterial",
        "texture",
        "material",
        "mesh",
        "threejs_basics",
        "skinMaterial",
        "textureLoader",
        "avatar"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:58:32.026149",
      "updated_at": "2025-07-05T21:58:32.026149",
      "version": "1.0.0",
      "dependencies": [
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_crear_animaciones_faciales_-_threejs_basics_20250705_215849",
      "title": "crear animaciones faciales - Threejs Basics",
      "description": "Pregunta: ¿Cómo crear animaciones faciales y corporales para un avatar 3D?",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\n// Función para cargar un modelo animado (GLTF/GLB)\nasync function loadAnimatedModel(path) {\n  const loader = new GLTFLoader();\n  return new Promise((resolve, reject) => {\n    loader.load(path, (gltf) => {\n      const model = gltf.scene;\n      const animations = gltf.animations;\n      resolve({ model, animations });\n    }, undefined, reject);\n  });\n}\n\nasync function init() {\n  // ... (Tu código de inicialización de escena, cámara, etc.)\n\n  // Carga el modelo animado\n  const { model, animations } = await loadAnimatedModel('ruta/a/tu/modelo.glb');\n  scene.add(model);\n\n  // Crea el AnimationMixer\n  const mixer = new THREE.AnimationMixer(model);\n\n  // Reproduce una animación específica (si la hay)\n  if (animations && animations.length > 0) {\n    const action = mixer.clipAction(animations[0]); // Primera animación\n    action.play();\n  }\n\n  // Función de animación (loop)\n  const animate = () => {\n    requestAnimationFrame(animate);\n    mixer.update(clock.getDelta()); // Actualiza el mixer\n    renderer.render(scene, camera);\n  };\n\n  animate();\n}\n\ninit();",
      "tags": [
        "scene",
        "action",
        "init",
        "loadAnimatedModel",
        "camera",
        "animations",
        "animation",
        "threejs_basics",
        "mixer",
        "loader",
        "animate",
        "avatar",
        "model"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:58:49.487537",
      "updated_at": "2025-07-05T21:58:49.487537",
      "version": "1.0.0",
      "dependencies": [
        "three/examples/jsm/loaders/GLTFLoader.js",
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_avatar_crear_sistema_huesos_-_threejs_avatar_20250705_215909",
      "title": "crear sistema huesos - Threejs Avatar",
      "description": "Pregunta: ¿Cómo crear un sistema de huesos (skeleton) para animaciones de avatar?",
      "category": "threejs_avatar",
      "language": "javascript",
      "code": "import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nasync function loadAvatarWithSkeleton(path) {\n  const loader = new GLTFLoader();\n  return new Promise((resolve, reject) => {\n    loader.load(\n      path,\n      (gltf) => {\n        const model = gltf.scene;\n        const skeleton = model.children[0].skeleton; // Suponiendo que el primer hijo del modelo es el mesh con el esqueleto\n\n        // Verificar que el esqueleto se cargó correctamente\n        if (skeleton) {\n          console.log(\"Esqueleto cargado:\", skeleton);\n          // Acceder a los huesos individualmente\n          // skeleton.bones[0] // Hueso raíz\n          // skeleton.bones[1] // Segundo hueso, etc.\n\n          resolve({ model, skeleton });\n        } else {\n          reject(\"El modelo no contiene un esqueleto.\");\n        }\n      },\n      undefined,\n      reject\n    );\n  });\n}\n\n\nasync function init() {\n  // ... (Tu código de inicialización de escena, cámara, etc.)\n\n  try {\n    const { model, skeleton } = await loadAvatarWithSkeleton('ruta/a/tu/modelo.glb');\n    scene.add(model);\n  } catch (error) {\n    console.error(\"Error al cargar el modelo:\", error);\n  }\n\n // ... (Resto de tu código)\n}\n\ninit();",
      "tags": [
        "scene",
        "init",
        "loadAvatarWithSkeleton",
        "mesh",
        "threejs_avatar",
        "skeleton",
        "loader",
        "avatar",
        "model"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:59:09.183387",
      "updated_at": "2025-07-05T21:59:09.183387",
      "version": "1.0.0",
      "dependencies": [
        "three/examples/jsm/loaders/GLTFLoader.js",
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_avatar_..._dentro_de_la_función_init(),_después_de_cargar_el_modelo_..._20250705_215909",
      "title": "... dentro de la función init(), después de cargar el modelo ...",
      "description": "Pregunta: ¿Cómo crear un sistema de huesos (skeleton) para animaciones de avatar?",
      "category": "threejs_avatar",
      "language": "javascript",
      "code": "// ... dentro de la función init(), después de cargar el modelo ...\n\n// Rotar el brazo izquierdo 45 grados en el eje X\nconst brazoIzquierdo = skeleton.getBoneByName(\"brazo_izquierdo\"); // Reemplaza con el nombre real del hueso\nif (brazoIzquierdo) {\n  brazoIzquierdo.rotation.x = THREE.MathUtils.degToRad(45);\n}",
      "tags": [
        "brazoIzquierdo",
        "avatar",
        "threejs_avatar",
        "model"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:59:09.198348",
      "updated_at": "2025-07-05T21:59:09.198348",
      "version": "1.0.0",
      "dependencies": [],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_implementar_controles_cámara_-_threejs_basics_20250705_215927",
      "title": "implementar controles cámara - Threejs Basics",
      "description": "Pregunta: ¿Cómo implementar controles de cámara para ver el avatar desde diferentes ángulos?",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\n// ... (Tu código de inicialización de escena, cámara, renderer, etc.)\n\nconst controls = new OrbitControls(camera, renderer.domElement);\ncontrols.target.set(0, 1, 0); // Ajusta el punto objetivo (ej. la posición del avatar)\ncontrols.update(); // Actualiza los controles\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  controls.update(); // Actualiza los controles en cada frame\n  renderer.render(scene, camera);\n}\n\nanimate();",
      "tags": [
        "scene",
        "camera",
        "controls",
        "animation",
        "threejs_basics",
        "animate",
        "avatar"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:59:27.547595",
      "updated_at": "2025-07-05T21:59:27.547595",
      "version": "1.0.0",
      "dependencies": [
        "three/examples/jsm/controls/OrbitControls.js",
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_..._(tu_código_de_inicialización)_20250705_215927",
      "title": "... (Tu código de inicialización)",
      "description": "Pregunta: ¿Cómo implementar controles de cámara para ver el avatar desde diferentes ángulos?",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "// ... (Tu código de inicialización)\n\nlet theta = 0; // Ángulo horizontal\nlet phi = Math.PI / 2; // Ángulo vertical\nconst radius = 5; // Distancia de la cámara al objetivo\n\nfunction updateCameraPosition() {\n  camera.position.x = radius * Math.sin(phi) * Math.cos(theta);\n  camera.position.y = radius * Math.cos(phi);\n  camera.position.z = radius * Math.sin(phi) * Math.sin(theta);\n  camera.lookAt(0, 1, 0); // Mira al objetivo (ej. la posición del avatar)\n}\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Ejemplo de control con teclado (puedes adaptarlo a tus necesidades)\n  const speed = 0.1;\n  if (keyboard.pressed(\"left\")) {\n    theta -= speed;\n  }\n  if (keyboard.pressed(\"right\")) {\n    theta += speed;\n  }\n  if (keyboard.pressed(\"up\")) {\n    phi -= speed;\n    phi = Math.max(0.1, phi); // Limita el ángulo vertical\n  }\n  if (keyboard.pressed(\"down\")) {\n    phi += speed;\n    phi = Math.min(Math.PI - 0.1, phi); // Limita el ángulo vertical\n  }\n\n  updateCameraPosition();\n  renderer.render(scene, camera);\n}\n\nanimate();",
      "tags": [
        "scene",
        "camera",
        "animation",
        "theta",
        "phi",
        "threejs_basics",
        "updateCameraPosition",
        "animate",
        "avatar",
        "speed",
        "radius"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:59:27.682235",
      "updated_at": "2025-07-05T21:59:27.682235",
      "version": "1.0.0",
      "dependencies": [],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_añadir_efectos_iluminación_-_threejs_basics_20250705_215947",
      "title": "añadir efectos iluminación - Threejs Basics",
      "description": "Pregunta: ¿Cómo añadir efectos de iluminación para que el avatar se vea realista?",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "import * as THREE from 'three';\n\n// ... (tu código de inicialización de escena, cámara, renderer, etc.)\n\n// Luz ambiental suave\nconst ambientLight = new THREE.AmbientLight(0xffffff, 0.2); // Color blanco, intensidad 0.2\nscene.add(ambientLight);\n\n// Luz direccional (como el sol)\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 0.8); // Color blanco, intensidad 0.8\ndirectionalLight.position.set(1, 2, 1); // Posición de la luz\ndirectionalLight.castShadow = true; // Habilita la proyección de sombras\nscene.add(directionalLight);\n\n// Ajustes de sombras para la luz direccional (opcional, pero recomendado)\ndirectionalLight.shadow.mapSize.width = 2048; // Resolución de la sombra\ndirectionalLight.shadow.mapSize.height = 2048;\ndirectionalLight.shadow.camera.near = 0.5; // Ajusta estos valores según la escena\ndirectionalLight.shadow.camera.far = 500;\n\n\n// Luz puntual (como una bombilla)\nconst pointLight = new THREE.PointLight(0xff0000, 1, 100); // Color rojo, intensidad 1, distancia 100\npointLight.position.set(-2, 1, 2);\npointLight.castShadow = true;\nscene.add(pointLight);\n\n\n// Asegúrate de que tu avatar proyecte y reciba sombras:\navatar.traverse(function (child) {\n    if (child.isMesh) {\n        child.castShadow = true;\n        child.receiveShadow = true;\n    }\n});\n\n\n// Habilita las sombras en el renderer\nrenderer.shadowMap.enabled = true;\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap; // Tipo de sombra (PCFSoftShadowMap es suave)\n\n// ... (resto de tu código)",
      "tags": [
        "scene",
        "ambientLight",
        "directionalLight",
        "camera",
        "pointLight",
        "mesh",
        "threejs_basics",
        "avatar"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T21:59:47.617638",
      "updated_at": "2025-07-05T21:59:47.617638",
      "version": "1.0.0",
      "dependencies": [
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_crear_sistema_gestos_-_threejs_basics_20250705_220007",
      "title": "crear sistema gestos - Threejs Basics",
      "description": "Pregunta: ¿Cómo crear un sistema de gestos y expresiones faciales?",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "import * as THREE from 'three';\n// ... (tu código de inicialización de escena, cámara, etc.)\n\n// Suponiendo que tu modelo tiene morph targets cargados desde un formato como glTF\n// avatar.geometry.morphAttributes.position contiene los datos de los morph targets\n\n// Ejemplo: Cambiar entre dos morph targets (neutral y sonrisa)\nconst neutralTargetIndex = 0; // Índice del morph target neutral\nconst smileTargetIndex = 1; // Índice del morph target sonrisa\n\nlet smileInfluence = 0;\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Animación simple de la sonrisa (puedes usar cualquier lógica aquí)\n  smileInfluence = Math.sin(Date.now() * 0.001) * 0.5 + 0.5;\n\n  // Aplica la influencia a los morph targets\n  avatar.morphTargetInfluences[neutralTargetIndex] = 1 - smileInfluence;\n  avatar.morphTargetInfluences[smileTargetIndex] = smileInfluence;\n\n  renderer.render(scene, camera);\n}\n\nanimate();",
      "tags": [
        "scene",
        "neutralTargetIndex",
        "smileInfluence",
        "camera",
        "geometry",
        "animation",
        "smileTargetIndex",
        "threejs_basics",
        "animate",
        "avatar",
        "model"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T22:00:07.717113",
      "updated_at": "2025-07-05T22:00:07.717113",
      "version": "1.0.0",
      "dependencies": [
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_avatar_..._(tu_código_de_inicialización)_20250705_220008",
      "title": "... (tu código de inicialización)",
      "description": "Pregunta: ¿Cómo crear un sistema de gestos y expresiones faciales?",
      "category": "threejs_avatar",
      "language": "javascript",
      "code": "// ... (tu código de inicialización)\n\n// Suponiendo que 'avatar' tiene un esqueleto cargado\nconst boneMano = avatar.skeleton.bones.find(bone => bone.name === 'Mano');\n\nfunction animate() {\n  // ...\n\n  // Rotar la mano (ejemplo)\n  boneMano.rotation.x = Math.sin(Date.now() * 0.002);\n\n  // ...\n}",
      "tags": [
        "boneMano",
        "avatar",
        "animate",
        "threejs_avatar"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T22:00:08.314877",
      "updated_at": "2025-07-05T22:00:08.314877",
      "version": "1.0.0",
      "dependencies": [],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_optimización_de_la_geometría_(decimation)_20250705_220030",
      "title": "Optimización de la geometría (Decimation)",
      "description": "Pregunta: ¿Cómo optimizar el rendimiento del avatar para el metaverso?",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "// Optimización de la geometría (Decimation)\nimport * as THREE from 'three';\nimport { SimplifyModifier } from 'three/examples/jsm/modifiers/SimplifyModifier.js';\n\n// ... tu código de inicialización ...\n\n// Suponiendo que 'avatarGeometry' es la geometría original\nconst modifier = new SimplifyModifier();\n\nconst decimatedGeometry = modifier.modify( avatarGeometry, avatarGeometry.attributes.position.count * 0.5 ); // Reducir a la mitad\n\navatar.geometry = decimatedGeometry;\n\n\n// Optimización de texturas\n// Usar texturas con potencias de 2 (128x128, 256x256, 512x512, etc.)\nconst textureLoader = new THREE.TextureLoader();\nconst texture = textureLoader.load( 'textura.jpg', (texture) => {\n    texture.minFilter = THREE.NearestFilter; // O THREE.LinearMipMapLinearFilter para mejor calidad si se usan mipmaps\n    texture.magFilter = THREE.NearestFilter; // O THREE.LinearFilter\n    texture.anisotropy = renderer.capabilities.getMaxAnisotropy(); // Ajustar la anisotropía\n    // ... aplicar la textura al material ...\n});\n\n// Instanciamiento (InstancedMesh) para múltiples copias del avatar\nconst instances = 100; // Número de instancias\n\nconst matrix = new THREE.Matrix4();\nconst dummy = new THREE.Object3D();\n\nconst instancedMesh = new THREE.InstancedMesh( avatar.geometry, avatar.material, instances );\n\nfor ( let i = 0; i < instances; i ++ ) {\n\n    dummy.position.set( Math.random() * 100 - 50, 0, Math.random() * 100 - 50 );\n    dummy.rotation.set( 0, Math.random() * 2 * Math.PI, 0 );\n    dummy.scale.setScalar( 0.5 + Math.random() ); // Variar la escala ligeramente\n    dummy.updateMatrix();\n\n    matrix.copy( dummy.matrix );\n\n    instancedMesh.setMatrixAt( i, matrix );\n\n}\n\nscene.add( instancedMesh );",
      "tags": [
        "scene",
        "modifier",
        "texture",
        "geometry",
        "material",
        "mesh",
        "matrix",
        "dummy",
        "threejs_basics",
        "decimatedGeometry",
        "instancedMesh",
        "instances",
        "textureLoader",
        "i",
        "avatar"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T22:00:30.142871",
      "updated_at": "2025-07-05T22:00:30.142871",
      "version": "1.0.0",
      "dependencies": [
        "three/examples/jsm/modifiers/SimplifyModifier.js",
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_integrar_avatar_sistemas_-_threejs_basics_20250705_220050",
      "title": "integrar avatar sistemas - Threejs Basics",
      "description": "Pregunta: ¿Cómo integrar el avatar con sistemas de física para movimientos realistas?",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "import * as THREE from 'three';\nimport * as CANNON from 'cannon-es';\n\n// Inicialización de Three.js (escena, cámara, renderizador, etc.)\n// ...\n\n// Inicialización de Cannon.js\nconst world = new CANNON.World();\nworld.gravity.set(0, -9.82, 0); // Gravedad\n\n// Cuerpo físico del avatar\nconst avatarBody = new CANNON.Body({\n    mass: 50, // Masa del avatar\n    shape: new CANNON.Capsule(1, 0.5), // Forma simplificada (cápsula)\n    position: new CANNON.Vec3(0, 2, 0), // Posición inicial\n});\nworld.addBody(avatarBody);\n\n\n// Función para actualizar la posición del avatar en Three.js con la del cuerpo físico\nfunction updateAvatarPosition() {\n    avatar.position.copy(avatarBody.position);\n    avatar.quaternion.copy(avatarBody.quaternion);\n}\n\n\n// Bucle de animación\nfunction animate() {\n    requestAnimationFrame(animate);\n\n    // Paso de simulación del motor de física\n    world.fixedStep(); \n\n    // Actualizar la posición del avatar en Three.js\n    updateAvatarPosition();\n\n    renderer.render(scene, camera);\n}\n\nanimate();\n\n\n// Ejemplo: Aplicar una fuerza al avatar (para saltar)\nfunction jump() {\n    avatarBody.applyImpulse(new CANNON.Vec3(0, 150, 0), avatarBody.position);\n}\n\n// Detectar colisiones (ejemplo simplificado)\navatarBody.addEventListener(\"collide\", (event) => {\n    console.log(\"Colisión detectada con:\", event.body);\n    // Aquí puedes implementar la lógica de la colisión (ej: rebote, daño, etc.)\n});\n\n// Agregar un suelo\nconst groundBody = new CANNON.Body({\n    mass: 0, // Masa infinita para que sea estático\n    shape: new CANNON.Plane(),\n});\ngroundBody.quaternion.setFromAxisAngle(new CANNON.Vec3(1, 0, 0), -Math.PI / 2); // Rotar para que sea horizontal\nworld.addBody(groundBody);\n\n// Representación visual del suelo en Three.js (opcional)\nconst groundGeometry = new THREE.PlaneGeometry(100, 100);\nconst groundMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\nconst groundMesh = new THREE.Mesh(groundGeometry, groundMaterial);\ngroundMesh.rotation.x = -Math.PI / 2;\nscene.add(groundMesh);",
      "tags": [
        "scene",
        "groundBody",
        "groundMesh",
        "camera",
        "world",
        "groundGeometry",
        "groundMaterial",
        "geometry",
        "material",
        "animation",
        "mesh",
        "three.js",
        "threejs_basics",
        "avatarBody",
        "updateAvatarPosition",
        "jump",
        "animate",
        "avatar"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T22:00:50.526439",
      "updated_at": "2025-07-05T22:00:50.526439",
      "version": "1.0.0",
      "dependencies": [
        "cannon-es",
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_avatar_crear_sistema_vestimenta_-_threejs_avatar_20250705_220109",
      "title": "crear sistema vestimenta - Threejs Avatar",
      "description": "Pregunta: ¿Cómo crear un sistema de vestimenta intercambiable?",
      "category": "threejs_avatar",
      "language": "javascript",
      "code": "import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\n// Modelo base del avatar\nlet avatar;\n\n// Objeto para almacenar las prendas\nconst clothes = {};\n\n// Cargar el modelo base del avatar\nconst loader = new GLTFLoader();\nloader.load('avatar_base.glb', (gltf) => {\n  avatar = gltf.scene;\n  scene.add(avatar);\n});\n\n// Función para cargar una prenda\nfunction loadCloth(clothName, clothPath) {\n  loader.load(clothPath, (gltf) => {\n    const cloth = gltf.scene;\n    cloth.name = clothName; // Asignar un nombre para identificarla\n\n    // Ajustar la posición y rotación de la prenda para que se adapte al avatar\n    cloth.position.set(0, 0, 0); // Ajustar según sea necesario\n    cloth.rotation.set(0, 0, 0); // Ajustar según sea necesario\n\n    // Agregar la prenda al objeto 'clothes' y al avatar\n    clothes[clothName] = cloth;\n    avatar.add(cloth);\n\n    // Ocultar la prenda inicialmente (opcional)\n    cloth.visible = false;\n  });\n}\n\n// Cargar diferentes prendas\nloadCloth('camiseta', 'camiseta.glb');\nloadCloth('pantalones', 'pantalones.glb');\nloadCloth('vestido', 'vestido.glb');\n\n\n// Función para cambiar la vestimenta\nfunction changeOutfit(outfit) {\n  // Ocultar todas las prendas\n  for (const clothName in clothes) {\n    clothes[clothName].visible = false;\n  }\n\n  // Mostrar las prendas del outfit especificado\n  if (outfit && outfit.length > 0) {\n    outfit.forEach(clothName => {\n      if (clothes[clothName]) {\n        clothes[clothName].visible = true;\n      }\n    });\n  }\n}\n\n// Ejemplo de uso:\nchangeOutfit(['camiseta', 'pantalones']); // Mostrar camiseta y pantalones\nchangeOutfit(['vestido']); // Mostrar el vestido\nchangeOutfit([]); // Ocultar toda la ropa",
      "tags": [
        "scene",
        "loadCloth",
        "changeOutfit",
        "clothes",
        "threejs_avatar",
        "clothName",
        "cloth",
        "loader",
        "avatar",
        "model"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T22:01:09.207643",
      "updated_at": "2025-07-05T22:01:09.207643",
      "version": "1.0.0",
      "dependencies": [
        "three/examples/jsm/loaders/GLTFLoader.js",
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_implementar_animaciones_correr_-_threejs_basics_20250705_220130",
      "title": "implementar animaciones correr - Threejs Basics",
      "description": "Pregunta: ¿Cómo implementar animaciones de caminar, correr y saltar?",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nlet avatar, mixer, actions = {}; // Guardar las acciones de animación\n\n// Cargar el modelo con animaciones\nconst loader = new GLTFLoader();\nloader.load('avatar_animado.glb', (gltf) => {\n  avatar = gltf.scene;\n  scene.add(avatar);\n\n  // Crear AnimationMixer\n  mixer = new THREE.AnimationMixer(avatar);\n\n  // Obtener las animaciones y crear acciones\n  gltf.animations.forEach((clip) => {\n    actions[clip.name] = mixer.clipAction(clip);\n  });\n\n  // Reproducir la animación de idle por defecto\n  actions['idle'].play();\n});\n\n\n// Función para cambiar de animación\nfunction changeAnimation(newName) {\n  const currentAction = Object.values(actions).find(action => action.isRunning());\n  const newAction = actions[newName];\n\n  if (currentAction && newAction) {\n    currentAction.crossFadeTo(newAction, 0.3, true); // Transición suave\n    newAction.play();\n  }\n}\n\n// En el bucle de animación\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Actualizar el mixer\n  if (mixer) mixer.update(clock.getDelta());\n\n  renderer.render(scene, camera);\n}\n\n// Ejemplo de uso (con eventos de teclado o controles)\ndocument.addEventListener('keydown', (event) => {\n  if (event.key === 'w') { // Caminar\n    changeAnimation('walk');\n  } else if (event.key === 'shift' && actions['walk'].isRunning()) { // Correr (manteniendo shift mientras caminas)\n    changeAnimation('run');\n  } else if (event.key === ' ') { // Saltar\n    changeAnimation('jump');\n  } else if (event.key === 's'){ // Idle\n    changeAnimation('idle');\n  }\n});\n\ndocument.addEventListener('keyup', (event) => {\n  if (event.key === 'shift' && actions['run'].isRunning()) { // Volver a caminar al soltar shift\n    changeAnimation('walk');\n  }\n});\n\n\n//  Al finalizar la animación de saltar, volver a idle o caminar/correr (según el estado previo)\nactions['jump'].onLoop = function(event){\n    if(event.loop === Math.floor(event.action.time/event.action.getClip().duration)){\n        if (actions['walk']._previousState === THREE.LoopOnce){\n            changeAnimation('walk');\n        } else if (actions['run']._previousState === THREE.LoopOnce){\n             changeAnimation('run');\n        } else {\n            changeAnimation('idle');\n        }\n\n    }\n}",
      "tags": [
        "scene",
        "camera",
        "changeAnimation",
        "animation",
        "threejs_basics",
        "newAction",
        "currentAction",
        "loader",
        "animate",
        "avatar",
        "model"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T22:01:30.446706",
      "updated_at": "2025-07-05T22:01:30.446706",
      "version": "1.0.0",
      "dependencies": [
        "three/examples/jsm/loaders/GLTFLoader.js",
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    }
  ]
}