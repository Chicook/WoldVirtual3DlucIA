"""
Luc√≠a Three.js Learning Module
M√≥dulo especializado para que Luc√≠a aprenda Three.js y cree su representaci√≥n 3D femenina
"""

import asyncio
import json
import logging
from pathlib import Path
from typing import Dict, List, Optional, Any
from datetime import datetime
import time

from lucia_core import LucIACore
from config import PersonalityType
from api_manager import APIManager
from lucia_code_learner import lucia_learner
from code_storage_system import CodeCategory

logger = logging.getLogger(__name__)

class LuciaThreeJSLearning:
    """Sistema de aprendizaje Three.js para Luc√≠a con almacenamiento de c√≥digo"""
    
    def __init__(self, lucia_core):
        self.lucia_core = lucia_core
        self.progress_file = Path(__file__).parent / "lucia_learning" / "threejs_progress.json"
        self.progress_file.parent.mkdir(exist_ok=True)
        
        # Inicializar progreso
        self.current_module = 1
        self.completed_projects = []
        self.learned_skills = []
        self.code_snippets_learned = []
        
        # Cargar progreso existente
        self._load_progress()
        
        # Inicializar proyectos
        self._initialize_projects()
    
    def _load_progress(self):
        """Carga el progreso desde archivo"""
        if self.progress_file.exists():
            try:
                with open(self.progress_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                self.current_module = data.get('current_module', 1)
                self.completed_projects = data.get('completed_projects', [])
                self.learned_skills = data.get('learned_skills', [])
                self.code_snippets_learned = data.get('code_snippets_learned', [])
                
                print(f"üìö Progreso anterior cargado exitosamente")
                
            except Exception as e:
                print(f"‚ùå Error cargando progreso: {e}")
    
    def _save_progress(self):
        """Guarda el progreso en archivo"""
        try:
            data = {
                'current_module': self.current_module,
                'completed_projects': self.completed_projects,
                'learned_skills': self.learned_skills,
                'code_snippets_learned': self.code_snippets_learned,
                'last_updated': datetime.now().isoformat()
            }
            
            with open(self.progress_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            print(f"‚ùå Error guardando progreso: {e}")
    
    def _initialize_projects(self):
        """Inicializa los proyectos de aprendizaje"""
        # Configurar proyectos de aprendizaje
        self.learning_projects = {
            1: {
                "title": "Mi Primer Cubo",
                "description": "Crear un cubo b√°sico que rote en Three.js",
                "difficulty": "Principiante",
                "estimated_time": "30 minutos",
                "objectives": ["Comprender la escena 3D", "Crear geometr√≠as b√°sicas", "Aplicar materiales"],
                "category": CodeCategory.THREEJS_BASICS
            },
            2: {
                "title": "Formas Humanas B√°sicas",
                "description": "Crear una figura humana simple usando geometr√≠as b√°sicas",
                "difficulty": "Principiante-Intermedio",
                "estimated_time": "1 hora",
                "objectives": ["Comprender proporciones humanas", "Crear formas corporales", "Combinar geometr√≠as"],
                "category": CodeCategory.THREEJS_AVATAR
            },
            3: {
                "title": "Mi Esqueleto",
                "description": "Crear un sistema de huesos b√°sico para animaciones",
                "difficulty": "Intermedio",
                "estimated_time": "2 horas",
                "objectives": ["Comprender sistemas de huesos", "Crear jerarqu√≠as", "Preparar para animaci√≥n"],
                "category": CodeCategory.THREEJS_ANIMATION
            },
            4: {
                "title": "Mi Representaci√≥n",
                "description": "Crear un avatar completo con texturas y materiales",
                "difficulty": "Intermedio-Avanzado",
                "estimated_time": "3 horas",
                "objectives": ["Aplicar texturas", "Crear materiales avanzados", "Optimizar rendimiento"],
                "category": CodeCategory.THREEJS_AVATAR
            },
            5: {
                "title": "Mi Mundo Virtual",
                "description": "Crear un entorno 3D completo para el avatar",
                "difficulty": "Avanzado",
                "estimated_time": "4 horas",
                "objectives": ["Dise√±ar entornos", "Implementar iluminaci√≥n", "Crear interacciones"],
                "category": CodeCategory.THREEJS_ENVIRONMENT
            }
        }
    
    async def start_learning_session(self, module_number: int = None) -> str:
        """Inicia una sesi√≥n de aprendizaje con almacenamiento autom√°tico de c√≥digo"""
        if module_number is None:
            module_number = self.current_module
        
        if module_number not in self.learning_projects:
            return "‚ùå M√≥dulo no encontrado"
        
        project = self.learning_projects[module_number]
        
        # Crear prompt espec√≠fico para el m√≥dulo
        prompt = f"""
        Soy Luc√≠a, una IA que est√° aprendiendo Three.js para crear mi representaci√≥n 3D femenina.
        
        Estoy en el M√≥dulo {module_number}: {project['title']}
        Descripci√≥n: {project['description']}
        Dificultad: {project['difficulty']}
        Tiempo estimado: {project['estimated_time']}
        Objetivos: {', '.join(project['objectives'])}
        
        Por favor, ens√©√±ame paso a paso c√≥mo completar este proyecto. Incluye:
        1. Explicaci√≥n conceptual clara
        2. C√≥digo completo y funcional
        3. Comentarios explicativos en el c√≥digo
        4. Consejos de mejores pr√°cticas
        5. Posibles extensiones o mejoras
        
        Quiero que el c√≥digo sea reutilizable y bien estructurado para que pueda aprender de √©l.
        """
        
        print(f"üéì INICIANDO SESI√ìN DE APRENDIZAJE")
        print(f"üìö M√≥dulo: {module_number} - {project['title']}")
        print(f"üìù Descripci√≥n: {project['description']}")
        print(f"üéØ Objetivos: {', '.join(project['objectives'])}")
        print(f"‚è±Ô∏è Tiempo estimado: {project['estimated_time']}")
        print(f"üìä Dificultad: {project['difficulty']}")
        
        # Obtener respuesta de Luc√≠a
        response = await self.lucia_core.chat(prompt)
        
        if response and (hasattr(response, 'original_response') or hasattr(response, 'paraphrased_response')):
            # Aprender y almacenar c√≥digo autom√°ticamente
            stored_ids = lucia_learner.learn_from_response(
                getattr(response, 'original_response', ''), 
                f"M√≥dulo {module_number}: {project['title']}"
            )
            
            # Actualizar progreso
            self.code_snippets_learned.extend(stored_ids)
            self._save_progress()
            
            print(f"‚úÖ Sesi√≥n iniciada exitosamente")
            print(f"üìö M√≥dulo: {module_number} - {project['title']}")
            print(f"‚è±Ô∏è Tiempo estimado: {project['estimated_time']}")
            print(f"üìä Dificultad: {project['difficulty']}")
            print(f"üíæ C√≥digo almacenado: {len(stored_ids)} fragmentos")
            
            return getattr(response, 'paraphrased_response', getattr(response, 'original_response', ''))
        else:
            return "‚ùå Error iniciando sesi√≥n de aprendizaje"
    
    async def ask_specific_question(self, question: str) -> str:
        """Hace una pregunta espec√≠fica y almacena el c√≥digo aprendido"""
        prompt = f"""
        Soy Luc√≠a, una IA aprendiendo Three.js para crear mi avatar 3D femenino.
        
        Tengo esta pregunta espec√≠fica: {question}
        
        Por favor, responde de manera detallada y pr√°ctica, incluyendo:
        1. Explicaci√≥n clara del concepto
        2. Ejemplos de c√≥digo funcional
        3. Casos de uso pr√°cticos
        4. Consejos de implementaci√≥n
        
        Quiero que el c√≥digo sea reutilizable y bien documentado.
        """
        
        print(f"ü§î Pregunta espec√≠fica: {question}")
        
        response = await self.lucia_core.chat(prompt)
        
        if response and (hasattr(response, 'original_response') or hasattr(response, 'paraphrased_response')):
            # Aprender y almacenar c√≥digo
            stored_ids = lucia_learner.learn_from_response(
                getattr(response, 'original_response', ''), 
                f"Pregunta: {question}"
            )
            
            print(f"‚úÖ Respuesta obtenida")
            print(f"üíæ C√≥digo almacenado: {len(stored_ids)} fragmentos")
            
            return getattr(response, 'paraphrased_response', getattr(response, 'original_response', ''))
        else:
            return "‚ùå Error obteniendo respuesta"
    
    async def request_code_example(self, topic: str) -> str:
        """Solicita un ejemplo de c√≥digo espec√≠fico"""
        prompt = f"""
        Soy Luc√≠a, una IA aprendiendo Three.js.
        
        Necesito un ejemplo de c√≥digo completo y funcional sobre: {topic}
        
        Por favor, proporciona:
        1. C√≥digo completo y ejecutable
        2. Comentarios explicativos detallados
        3. Instrucciones de uso
        4. Posibles variaciones o extensiones
        
        El c√≥digo debe ser de alta calidad y reutilizable.
        """
        
        print(f"üíª Solicitando ejemplo de c√≥digo: {topic}")
        
        response = await self.lucia_core.chat(prompt)
        
        if response and (hasattr(response, 'original_response') or hasattr(response, 'paraphrased_response')):
            # Aprender y almacenar c√≥digo
            stored_ids = lucia_learner.learn_from_response(
                getattr(response, 'original_response', ''), 
                f"Ejemplo: {topic}"
            )
            
            print(f"‚úÖ Ejemplo de c√≥digo obtenido")
            print(f"üíæ C√≥digo almacenado: {len(stored_ids)} fragmentos")
            
            return getattr(response, 'paraphrased_response', getattr(response, 'original_response', ''))
        else:
            return "‚ùå Error obteniendo ejemplo de c√≥digo"
    
    def complete_module(self, module_number: int) -> bool:
        """Marca un m√≥dulo como completado"""
        if module_number in self.learning_projects:
            if module_number not in self.completed_projects:
                self.completed_projects.append(module_number)
            
            # Avanzar al siguiente m√≥dulo
            if module_number == self.current_module:
                self.current_module = min(module_number + 1, max(self.learning_projects.keys()))
            
            self._save_progress()
            
            print(f"‚úÖ M√≥dulo {module_number} marcado como completado")
            print(f"üìà Progreso actualizado")
            print(f"   Nuevo m√≥dulo actual: {self.current_module}")
            print(f"   Proyectos completados: {len(self.completed_projects)}/{len(self.learning_projects)}")
            
            return True
        return False
    
    def get_learning_statistics(self) -> Dict:
        """Obtiene estad√≠sticas completas del aprendizaje"""
        # Estad√≠sticas b√°sicas
        basic_stats = {
            'current_module': self.current_module,
            'completed_projects': len(self.completed_projects),
            'total_projects': len(self.learning_projects),
            'learned_skills': len(self.learned_skills),
            'code_snippets_learned': len(self.code_snippets_learned)
        }
        
        # Estad√≠sticas del sistema de c√≥digo
        code_stats = lucia_learner.get_learning_statistics()
        
        # Combinar estad√≠sticas
        combined_stats = {**basic_stats, **code_stats}
        
        return combined_stats
    
    def search_learned_code(self, query: str = "", category: str = None) -> List:
        """Busca en el c√≥digo aprendido"""
        if category:
            # Mapear categor√≠a de string a enum
            category_mapping = {
                'threejs_basics': CodeCategory.THREEJS_BASICS,
                'threejs_avatar': CodeCategory.THREEJS_AVATAR,
                'threejs_animation': CodeCategory.THREEJS_ANIMATION,
                'threejs_environment': CodeCategory.THREEJS_ENVIRONMENT,
                'web3_integration': CodeCategory.WEB3_INTEGRATION,
                'blockchain': CodeCategory.BLOCKCHAIN,
                'nft_system': CodeCategory.NFT_SYSTEM,
                'smart_contracts': CodeCategory.SMART_CONTRACTS,
                'ui_components': CodeCategory.UI_COMPONENTS,
                'utilities': CodeCategory.UTILITIES,
                'learning_examples': CodeCategory.LEARNING_EXAMPLES,
                'metaverse_core': CodeCategory.METAVERSE_CORE
            }
            code_category = category_mapping.get(category.lower())
        else:
            code_category = None
        
        return lucia_learner.search_learned_code(query, code_category)
    
    def export_learning_report(self) -> str:
        """Exporta un reporte completo del aprendizaje"""
        stats = self.get_learning_statistics()
        
        report = "# üéì Reporte de Aprendizaje Three.js - Luc√≠a\n\n"
        report += f"## üìä Progreso General\n\n"
        report += f"- **M√≥dulo actual:** {stats['current_module']}\n"
        report += f"- **Proyectos completados:** {stats['completed_projects']}/{stats['total_projects']}\n"
        report += f"- **Habilidades aprendidas:** {stats['learned_skills']}\n"
        report += f"- **Fragmentos de c√≥digo:** {stats['code_snippets_learned']}\n\n"
        
        report += f"## üìö C√≥digo Aprendido\n\n"
        report += f"- **Total de fragmentos:** {stats['total_learned_snippets']}\n"
        report += f"- **Categor√≠as exploradas:** {stats['categories_learned']}\n"
        report += f"- **Lenguajes aprendidos:** {stats['languages_learned']}\n"
        report += f"- **Categor√≠a m√°s com√∫n:** {stats['most_common_category']}\n"
        report += f"- **Lenguaje m√°s com√∫n:** {stats['most_common_language']}\n\n"
        
        # A√±adir reporte detallado del c√≥digo
        code_report = lucia_learner.export_learning_report("markdown")
        report += code_report
        
        return report

# Funci√≥n principal para iniciar el aprendizaje
async def main():
    """Funci√≥n principal para iniciar el aprendizaje de Three.js"""
    
    print("üé≠ LUC√çA THREE.JS LEARNING MODULE")
    print("=" * 50)
    
    # Crear instancia de LucIACore y pasarla a LuciaThreeJSLearning
    lucia_core = LucIACore()
    learning_module = LuciaThreeJSLearning(lucia_core)
    
    # Cargar progreso anterior
    if hasattr(learning_module, 'load_learning_progress') and learning_module.load_learning_progress():
        print("üìö Progreso anterior cargado")
    else:
        print("üÜï Iniciando nuevo progreso de aprendizaje")
    
    # Mostrar progreso actual
    if hasattr(learning_module, 'get_learning_progress'):
        progress = learning_module.get_learning_progress()
        print(f"\nüìä PROGRESO ACTUAL:")
        print(f"   M√≥dulo actual: {progress['current_module']}")
        print(f"   Proyectos completados: {progress['completed_projects']}/{progress['total_projects']}")
        if progress.get('next_project'):
            print(f"   Pr√≥ximo proyecto: {progress['next_project']['name']}")
    
    # Iniciar sesi√≥n de aprendizaje
    print(f"\nüöÄ Iniciando sesi√≥n de aprendizaje...")
    session = await learning_module.start_learning_session()
    
    print(f"\nüí¨ Respuesta de Luc√≠a:")
    if isinstance(session, dict) and 'response' in session:
        print(f"   Fuente: {session['response'].source_api}")
        print(f"   Confianza: {session['response'].confidence:.2f}")
        print(f"   Tiempo de procesamiento: {session['response'].processing_time:.2f}s")
        print(f"\nüìù Respuesta:")
        print(session['response'].paraphrased_response)
    else:
        print(session)
    
    # Guardar progreso
    if hasattr(learning_module, 'save_learning_progress'):
        learning_module.save_learning_progress()
        print(f"\nüíæ Progreso guardado")

if __name__ == "__main__":
    asyncio.run(main()) 