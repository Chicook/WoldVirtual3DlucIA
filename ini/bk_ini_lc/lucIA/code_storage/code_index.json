{
  "metadata": {
    "total_snippets": 7,
    "last_updated": "2025-07-05T23:34:17.456756",
    "version": "1.0.0"
  },
  "snippets": [
    {
      "id": "threejs_basics_módulo_esqueleto_-_threejs_basics_20250705_232931",
      "title": "Módulo Esqueleto - Threejs Basics",
      "description": "Módulo 3: Mi Esqueleto",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "import * as THREE from 'three'; // Crear la escena, cámara y renderizador (asumo que ya tienes esto configurado) const scene = new THREE.Scene(); const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 ); const renderer = new THREE.WebGLRenderer(); renderer.setSize( window.innerWidth, window.innerHeight ); document.body.appendChild( renderer.domElement ); // desarrollar el esqueleto const bones = []; // Hueso raíz (pelvis) const pelvisBone = new THREE.Bone(); bones.push( pelvisBone ); // Hueso del torso const torsoBone = new THREE.Bone(); torsoBone.position.y = 1; // Posición relativa al pelvisBone bones.push( torsoBone ); pelvisBone.add( torsoBone ); // Conectar torso al pelvis // Hueso de la cabeza const headBone = new THREE.Bone(); headBone.position.y = 1; // Posición relativa al torsoBone bones.push( headBone ); torsoBone.add( headBone ); // Hueso del brazo izquierdo const leftArmBone = new THREE.Bone(); leftArmBone.position.x = -0.5; // Posición relativa al torsoBone leftArmBone.position.y = 0.8; bones.push( leftArmBone ); torsoBone.add( leftArmBone ); // Hueso del brazo derecho (similar al izquierdo) const rightArmBone = new THREE.Bone(); rightArmBone.position.x = 0.5; rightArmBone.position.y = 0.8; bones.push( rightArmBone ); torsoBone.add( rightArmBone ); // desarrollar un SkinnedMesh (malla que se deformará con el esqueleto) const geometry = new THREE.BoxGeometry( 0.2, 0.2, 0.2 ); // Geometría simple para visualizar los huesos const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } ); // desarrollar un array de influencias para la piel. En este caso simple, cada vértice es influenciado por un solo hueso. const skinIndices = []; const skinWeights = []; for (let i = 0; i < geometry.attributes.position.count; i++) { const vertexIndex = Math.floor(i / 3) % bones.length; // Asignar un hueso a cada vértice (simplificado) skinIndices.push(vertexIndex, 0, 0); skinWeights.push(1, 0, 0); } geometry.setAttribute( 'skinIndex', new THREE.Uint16BufferAttribute( skinIndices, 3 ) ); geometry.setAttribute( 'skinWeight', new THREE.Float32BufferAttribute( skinWeights, 3 ) ); const mesh = new THREE.SkinnedMesh( geometry, material ); const skeleton = new THREE.Skeleton( bones ); mesh.add( bones[ 0 ] ); // Agregar el hueso raíz a la malla mesh.bind( skeleton ); scene.add( mesh ); camera.position.z = 5; // Render loop function animate() { requestAnimationFrame( animate ); renderer.render( scene, camera ); } animate();",
      "tags": [
        "animation",
        "leftArmBone",
        "vertexIndex",
        "bones",
        "skinIndices",
        "i",
        "renderer",
        "torsoBone",
        "scene",
        "geometry",
        "camera",
        "pelvisBone",
        "threejs_basics",
        "rightArmBone",
        "animate",
        "skinWeights",
        "skeleton",
        "mesh",
        "material",
        "headBone"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T23:29:31.443956",
      "updated_at": "2025-07-05T23:29:31.443956",
      "version": "1.0.0",
      "dependencies": [
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_módulo_esqueleto_-_threejs_basics_20250705_233054",
      "title": "Módulo Esqueleto - Threejs Basics",
      "description": "Módulo 3: Mi Esqueleto",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "import * as THREE from 'three'; // desarrollar la escena, cámara y renderizador (asumo que ya tienes esto configurado) const scene = new THREE.Scene(); const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 ); const renderer = new THREE.WebGLRenderer(); renderer.setSize( window.innerWidth, window.innerHeight ); document.body.appendChild( renderer.domElement ); // desarrollar el esqueleto (Bones) const bones = []; // Hueso de la cadera (root) const boneHip = new THREE.Bone(); bones.push(boneHip); // Hueso del torso const boneTorso = new THREE.Bone(); boneTorso.position.y = 1; // Posición relativa a la cadera bones.push(boneTorso); boneHip.add(boneTorso); // Agregar el torso como hijo de la cadera // Hueso de la cabeza const boneHead = new THREE.Bone(); boneHead.position.y = 1; // Posición relativa al torso bones.push(boneHead); boneTorso.add(boneHead); // Agregar la cabeza como hijo del torso // desarrollar un SkinnedMesh (malla que se deformará con el esqueleto) const geometry = new THREE.BoxGeometry(1, 1, 1); // Geometría simple de ejemplo const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } ); // SkinnedMesh necesita un array de huesos y un array de influencias (pesos) const skinMesh = new THREE.SkinnedMesh( geometry, material ); const skeleton = new THREE.Skeleton( bones ); skinMesh.add( boneHip ); // Agregar el hueso raíz al SkinnedMesh skinMesh.bind( skeleton ); // Vincular el esqueleto al SkinnedMesh scene.add( skinMesh ); camera.position.z = 5; // Función de animación function animate() { requestAnimationFrame( animate ); // Ejemplo de rotación del hueso del torso boneTorso.rotation.x += 0.01; renderer.render( scene, camera ); } animate();",
      "tags": [
        "animate",
        "renderer",
        "material",
        "threejs_basics",
        "geometry",
        "skeleton",
        "camera",
        "animation",
        "boneHip",
        "boneHead",
        "bones",
        "skinMesh",
        "boneTorso",
        "scene",
        "mesh"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T23:30:54.663680",
      "updated_at": "2025-07-05T23:30:54.663680",
      "version": "1.0.0",
      "dependencies": [
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_módulo_esqueleto_-_threejs_basics_20250705_233145",
      "title": "Módulo Esqueleto - Threejs Basics",
      "description": "Módulo 3: Mi Esqueleto",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "import * as THREE from 'three'; // Escena, cámara y renderizador const scene = new THREE.Scene(); const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 ); const renderer = new THREE.WebGLRenderer(); renderer.setSize( window.innerWidth, window.innerHeight ); document.body.appendChild( renderer.domElement ); // Luz ambiental const ambientLight = new THREE.AmbientLight(0xffffff, 0.5); scene.add(ambientLight); // Geometría simple para visualizar el esqueleto (puedes reemplazarla con tu modelo) const geometry = new THREE.BoxGeometry(1, 1, 1); const material = new THREE.MeshStandardMaterial({ color: 0x00ff00 }); const mesh = new THREE.Mesh(geometry, material); scene.add(mesh); // Huesos const bones = []; // Hueso raíz (pelvis) const bone0 = new THREE.Bone(); // Crea el hueso bone0.position.y = -2; // Posición inicial bones.push(bone0); // Hueso torso const bone1 = new THREE.Bone(); bone1.position.y = 1; bones.push(bone1); bone0.add(bone1); // bone1 es hijo de bone0 // Hueso cabeza const bone2 = new THREE.Bone(); bone2.position.y = 1; bones.push(bone2); bone1.add(bone2); // bone2 es hijo de bone1 // SkinnedMesh const skinGeo = new THREE.SkinnedMesh(geometry, material); const rootBone = bones[0]; const skeleton = new THREE.Skeleton(bones); skinGeo.add(rootBone); // Agrega el hueso raíz a la malla skinGeo.bind(skeleton); // Vincula el esqueleto a la malla scene.add(skinGeo); //Helpers para visualizar los huesos (opcional) const skeletonHelper = new THREE.SkeletonHelper( skinGeo ); scene.add( skeletonHelper ); camera.position.z = 5; // Animación (ejemplo simple) const animate = function () { requestAnimationFrame( animate ); // Rota el hueso del torso bone1.rotation.x = Math.sin(Date.now() * 0.005) * 0.5; renderer.render( scene, camera ); }; animate();",
      "tags": [
        "bones",
        "skeletonHelper",
        "renderer",
        "material",
        "bone2",
        "skinGeo",
        "bone1",
        "model",
        "ambientLight",
        "animation",
        "animate",
        "threejs_basics",
        "scene",
        "camera",
        "mesh",
        "skeleton",
        "rootBone",
        "bone0",
        "geometry"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T23:31:45.592621",
      "updated_at": "2025-07-05T23:31:45.592621",
      "version": "1.0.0",
      "dependencies": [
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_módulo_representación_-_threejs_basics_20250705_233242",
      "title": "Módulo Representación - Threejs Basics",
      "description": "Módulo 4: Mi Representación",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "import * as THREE from 'three'; import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'; // Escena, cámara y renderizador const scene = new THREE.Scene(); const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 ); const renderer = new THREE.WebGLRenderer(); renderer.setSize( window.innerWidth, window.innerHeight ); document.body.appendChild( renderer.domElement ); // Luz ambiental const ambientLight = new THREE.AmbientLight( 0x404040 ); scene.add( ambientLight ); // Luz direccional const directionalLight = new THREE.DirectionalLight( 0xffffff, 1 ); directionalLight.position.set( 1, 1, 1 ); scene.add( directionalLight ); // Cargar el modelo GLTF (reemplaza 'avatar.glb' con la ruta de tu modelo) const loader = new GLTFLoader(); loader.load( 'avatar.glb', function ( gltf ) { const model = gltf.scene; scene.add( model ); // Ajustar la posición/escala del modelo si es necesario model.position.y = -1; // Ejemplo: Ajustar la altura model.scale.set(0.5, 0.5, 0.5); // Ejemplo: Ajustar la escala // Recorrer los materiales del modelo y aplicar texturas/propiedades model.traverse( ( child ) => { if ( child.isMesh ) { // Ejemplo: Aplicar una textura a la piel if (child.name === \"SkinMesh\") { // Reemplaza \"SkinMesh\" con el nombre de tu mesh const textureLoader = new THREE.TextureLoader(); const skinTexture = textureLoader.load('skin.jpg'); // Reemplaza 'skin.jpg' child.material = new THREE.MeshStandardMaterial({ map: skinTexture }); } // ... Repite para otros materiales (ropa, cabello, etc.) // Optimización: activar shadow casting/receiving si es necesario child.castShadow = true; child.receiveShadow = true; } }); // Animación (loop de renderizado) function animate() { requestAnimationFrame( animate ); renderer.render( scene, camera ); } animate(); }, undefined, function ( error ) { console.error( error ); } ); // Posición de la cámara camera.position.z = 5;",
      "tags": [
        "threejs_basics",
        "animation",
        "mesh",
        "camera",
        "scene",
        "renderer",
        "directionalLight",
        "textureLoader",
        "animate",
        "material",
        "skinTexture",
        "model",
        "ambientLight",
        "avatar",
        "texture",
        "loader"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T23:32:42.403839",
      "updated_at": "2025-07-05T23:32:42.403839",
      "version": "1.0.0",
      "dependencies": [
        "three",
        "three/examples/jsm/loaders/GLTFLoader.js"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_módulo_mundo_virtual_-_threejs_basics_20250705_233313",
      "title": "Módulo Mundo Virtual - Threejs Basics",
      "description": "Módulo 5: Mi Mundo Virtual",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "import * as THREE from 'three'; import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'; // Escena const scene = new THREE.Scene(); scene.background = new THREE.Color(0x87ceeb); // Cielo azul // Cámara const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); camera.position.set(0, 5, 10); // Renderizador const renderer = new THREE.WebGLRenderer(); renderer.setSize(window.innerWidth, window.innerHeight); document.body.appendChild(renderer.domElement); // Controles de órbita (para navegar con el mouse) const controls = new OrbitControls(camera, renderer.domElement); // Suelo const groundGeometry = new THREE.PlaneGeometry(20, 20); const groundMaterial = new THREE.MeshPhongMaterial({ color: 0x228b22 }); // Verde const ground = new THREE.Mesh(groundGeometry, groundMaterial); ground.rotation.x = -Math.PI / 2; // Rotar para que sea horizontal scene.add(ground); // Cubo (ejemplo de objeto interactivo) const cubeGeometry = new THREE.BoxGeometry(1, 1, 1); const cubeMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000 }); // Rojo const cube = new THREE.Mesh(cubeGeometry, cubeMaterial); cube.position.set(3, 0.5, 0); scene.add(cube); // Luz ambiental const ambientLight = new THREE.AmbientLight(0xffffff, 0.5); // Luz suave general scene.add(ambientLight); // Luz direccional (como el sol) const directionalLight = new THREE.DirectionalLight(0xffffff, 1); directionalLight.position.set(5, 10, 5); scene.add(directionalLight); // Raycaster para la interacción const raycaster = new THREE.Raycaster(); const mouse = new THREE.Vector2(); window.addEventListener('click', (event) => { mouse.x = (event.clientX / window.innerWidth) * 2 - 1; mouse.y = -(event.clientY / window.innerHeight) * 2 + 1; raycaster.setFromCamera(mouse, camera); const intersects = raycaster.intersectObjects(scene.children); for (let i = 0; i < intersects.length; i++) { if (intersects[i].object === cube) { // Si se hace clic en el cubo intersects[i].object.material.color.set(0x0000ff); // Cambiar color a azul console.log(\"¡Clic en el cubo!\"); } } }); // Animación (loop de renderizado) function animate() { requestAnimationFrame(animate); renderer.render(scene, camera); } animate(); // Ajustar al redimensionar la ventana window.addEventListener('resize', () => { camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight); });",
      "tags": [
        "ambientLight",
        "groundGeometry",
        "intersects",
        "renderer",
        "raycaster",
        "threejs_basics",
        "mesh",
        "directionalLight",
        "geometry",
        "cube",
        "ground",
        "groundMaterial",
        "animation",
        "scene",
        "material",
        "camera",
        "animate",
        "controls",
        "mouse",
        "i",
        "cubeGeometry",
        "cubeMaterial"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T23:33:13.362093",
      "updated_at": "2025-07-05T23:33:13.362093",
      "version": "1.0.0",
      "dependencies": [
        "three/examples/jsm/controls/OrbitControls.js",
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_módulo_primer_cubo_-_threejs_basics_20250705_233354",
      "title": "Módulo Primer Cubo - Threejs Basics",
      "description": "Módulo 1: Mi Primer Cubo",
      "category": "threejs_basics",
      "language": "html",
      "code": "<!DOCTYPE html> <html> <head> <title>Mi Primer Cubo en Three.js</title> <style> body { margin: 0; overflow: hidden; } /* Elimina márgenes y scrollbars */ canvas { display: block; } /* Evita espacios en blanco alrededor del canvas */ </style> </head> <body> <script src=\"https://cdn.jsdelivr.net/npm/three@0.149.0/build/three.min.js\"></script> <script> // 1. desarrollar la escena const scene = new THREE.Scene(); // 2. desarrollar la cámara (PerspectiveCamera) const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); camera.position.z = 5; // Alejar la cámara para ver el cubo // 3. desarrollar el renderizador const renderer = new THREE.WebGLRenderer(); renderer.setSize(window.innerWidth, window.innerHeight); document.body.appendChild(renderer.domElement); // 4. desarrollar la geometría (cubo) const geometry = new THREE.BoxGeometry(); // 5. desarrollar el material const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 }); // Verde // 6. desarrollar la malla (combinar geometría y material) const cube = new THREE.Mesh(geometry, material); scene.add(cube); // Agregar el cubo a la escena // Función de animación function animate() { requestAnimationFrame(animate); // Bucle de animación cube.rotation.x += 0.01; // Rotar el cubo en el eje x cube.rotation.y += 0.01; // Rotar el cubo en el eje y renderer.render(scene, camera); // Renderizar la escena } animate(); // Iniciar la animación // Ajustar el tamaño del canvas al cambiar el tamaño de la ventana window.addEventListener('resize', () => { camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight); }); </script> </body> </html>",
      "tags": [
        "geometry",
        "html",
        "animation",
        "scene",
        "renderer",
        "material",
        "animate",
        "threejs_basics",
        "three.js",
        "cube",
        "camera",
        "mesh"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T23:33:54.140343",
      "updated_at": "2025-07-05T23:33:54.140343",
      "version": "1.0.0",
      "dependencies": [],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    },
    {
      "id": "threejs_basics_módulo_formas_humanas_-_threejs_basics_20250705_233417",
      "title": "Módulo Formas Humanas - Threejs Basics",
      "description": "Módulo 2: Formas Humanas Básicas",
      "category": "threejs_basics",
      "language": "javascript",
      "code": "import * as THREE from 'three'; function createHuman() { const human = new THREE.Group(); // Cabeza const headGeometry = new THREE.SphereGeometry(0.5, 32, 32); // Radio, segmentosWidth, segmentosHeight const headMaterial = new THREE.MeshStandardMaterial({ color: 0xffcc99 }); // Color piel const head = new THREE.Mesh(headGeometry, headMaterial); human.add(head); // Torso const torsoGeometry = new THREE.BoxGeometry(1, 1.5, 0.5); // Ancho, alto, profundidad const torsoMaterial = new THREE.MeshStandardMaterial({ color: 0x006699 }); // Color azul const torso = new THREE.Mesh(torsoGeometry, torsoMaterial); torso.position.y = -1; // Ajustar posición vertical human.add(torso); // Brazos const armGeometry = new THREE.CylinderGeometry(0.15, 0.15, 1, 32); // Radio superior, radio inferior, altura, segmentos radiales const armMaterial = new THREE.MeshStandardMaterial({ color: 0xffcc99 }); function createArm(side) { const arm = new THREE.Mesh(armGeometry, armMaterial); arm.position.x = side * 0.6; // Posición horizontal según el lado (izquierdo o derecho) arm.position.y = -0.5; // Posición vertical human.add(arm); } createArm(-1); // Brazo izquierdo createArm(1); // Brazo derecho // Piernas const legGeometry = new THREE.CylinderGeometry(0.2, 0.1, 1.5, 32); const legMaterial = new THREE.MeshStandardMaterial({ color: 0x663300 }); // Color marrón function createLeg(side) { const leg = new THREE.Mesh(legGeometry, legMaterial); leg.position.x = side * 0.3; leg.position.y = -2; human.add(leg); } createLeg(-1); // Pierna izquierda createLeg(1); // Pierna derecha return human; } export { createHuman };",
      "tags": [
        "torsoMaterial",
        "human",
        "geometry",
        "headGeometry",
        "legMaterial",
        "armMaterial",
        "mesh",
        "leg",
        "legGeometry",
        "createArm",
        "arm",
        "armGeometry",
        "createHuman",
        "threejs_basics",
        "createLeg",
        "torso",
        "torsoGeometry",
        "headMaterial",
        "material",
        "head"
      ],
      "author": "Lucía",
      "created_at": "2025-07-05T23:34:17.455786",
      "updated_at": "2025-07-05T23:34:17.455786",
      "version": "1.0.0",
      "dependencies": [
        "three"
      ],
      "usage_examples": [],
      "performance_notes": "",
      "difficulty_level": "intermediate",
      "is_verified": false,
      "test_coverage": 0.0
    }
  ]
}