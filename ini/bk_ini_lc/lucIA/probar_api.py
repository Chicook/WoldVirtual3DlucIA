#!/usr/bin/env python3
"""
Script para probar la configuraci√≥n de la API de ChatGPT
"""

import os
import sys
from pathlib import Path

def probar_configuracion():
    """Prueba la configuraci√≥n de la API"""
    
    print("üß™ PROBANDO CONFIGURACI√ìN DE API")
    print("=" * 40)
    
    # Verificar archivo .env
    env_file = Path(__file__).parent / ".env"
    if not env_file.exists():
        print("‚ùå No se encontr√≥ el archivo .env")
        print("üí° Ejecuta primero: python configurar_api.py")
        return False
    
    print("‚úÖ Archivo .env encontrado")
    
    # Cargar variables de entorno
    try:
        from dotenv import load_dotenv
        load_dotenv(env_file)
        print("‚úÖ Variables de entorno cargadas")
    except Exception as e:
        print(f"‚ùå Error cargando variables de entorno: {e}")
        return False
    
    # Verificar API key
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå No se encontr√≥ OPENAI_API_KEY en las variables de entorno")
        return False
    
    print("‚úÖ API key encontrada")
    
    # Verificar formato de la API key
    if not api_key.startswith("sk-"):
        print("‚ö†Ô∏è  La API key no tiene el formato esperado (deber√≠a empezar con 'sk-')")
    
    # Probar configuraci√≥n del sistema
    try:
        from config import Config
        config = Config()
        
        apis = config.get_enabled_apis()
        if not apis:
            print("‚ùå No hay APIs configuradas en el sistema")
            return False
        
        print(f"‚úÖ {len(apis)} APIs configuradas:")
        for api in apis:
            print(f"   - {api.name}: {api.api_type.value} (Prioridad: {api.priority})")
        
        # Buscar API de OpenAI
        openai_api = None
        for api in apis:
            if api.api_type.value == "openai":
                openai_api = api
                break
        
        if not openai_api:
            print("‚ùå No se encontr√≥ la API de OpenAI en la configuraci√≥n")
            return False
        
        print("‚úÖ API de OpenAI configurada correctamente")
        print(f"   - Modelo: {openai_api.model}")
        print(f"   - Endpoint: {openai_api.endpoint}")
        print(f"   - L√≠mite diario: {openai_api.daily_limit}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando configuraci√≥n del sistema: {e}")
        return False

def probar_conexion_api():
    """Prueba la conexi√≥n real con la API"""
    
    print("\nüåê PROBANDO CONEXI√ìN CON LA API")
    print("=" * 40)
    
    try:
        import openai
        from dotenv import load_dotenv
        
        # Cargar variables de entorno
        env_file = Path(__file__).parent / ".env"
        load_dotenv(env_file)
        
        # Configurar cliente de OpenAI
        client = openai.OpenAI(
            api_key=os.getenv("OPENAI_API_KEY"),
            timeout=30.0
        )
        
        print("üîÑ Enviando prueba a la API...")
        
        # Prueba simple
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": "Responde solo con 'OK' si recibes este mensaje."}
            ],
            max_tokens=10,
            temperature=0
        )
        
        if response.choices and response.choices[0].message.content:
            print("‚úÖ Conexi√≥n exitosa con la API de OpenAI")
            print(f"üìù Respuesta: {response.choices[0].message.content}")
            print(f"üí∞ Tokens usados: {response.usage.total_tokens}")
            return True
        else:
            print("‚ùå No se recibi√≥ respuesta v√°lida de la API")
            return False
            
    except Exception as e:
        print(f"‚ùå Error conectando con la API: {e}")
        return False

def probar_lucia_completa():
    """Prueba LucIA completa con la API configurada"""
    
    print("\nü§ñ PROBANDO LUCIA COMPLETA")
    print("=" * 40)
    
    try:
        from lucia_core import LuciaCore
        
        # Crear instancia de LucIA
        lucia = LuciaCore()
        
        print("üîÑ Inicializando LucIA...")
        
        # Probar respuesta simple
        respuesta = lucia.process_message("Hola, ¬øc√≥mo est√°s?")
        
        if respuesta:
            print("‚úÖ LucIA respondi√≥ correctamente")
            print(f"üìù Respuesta: {respuesta[:100]}...")
            return True
        else:
            print("‚ùå LucIA no respondi√≥")
            return False
            
    except Exception as e:
        print(f"‚ùå Error probando LucIA: {e}")
        return False

def main():
    """Funci√≥n principal"""
    
    print("üß™ TEST COMPLETO DE CONFIGURACI√ìN DE API")
    print("=" * 50)
    print()
    
    # Paso 1: Probar configuraci√≥n
    if not probar_configuracion():
        print("\n‚ùå Configuraci√≥n incorrecta. Revisa los pasos anteriores.")
        return
    
    # Paso 2: Probar conexi√≥n con API
    if not probar_conexion_api():
        print("\n‚ùå Error de conexi√≥n con la API. Verifica tu API key.")
        return
    
    # Paso 3: Probar LucIA completa
    if not probar_lucia_completa():
        print("\n‚ùå Error en LucIA. Revisa la configuraci√≥n del sistema.")
        return
    
    print("\nüéâ ¬°TODAS LAS PRUEBAS EXITOSAS!")
    print("‚úÖ Tu API de ChatGPT est√° configurada correctamente")
    print("‚úÖ LucIA est√° funcionando perfectamente")
    print("\nüí° Ahora puedes usar LucIA con: python lucIA.py")

if __name__ == "__main__":
    main() 