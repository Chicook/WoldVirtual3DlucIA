#!/usr/bin/env python3
"""
Script para configurar la API de ChatGPT de forma segura
Este script te ayuda a configurar tu API key sin exponerla en el c√≥digo
"""

import os
import json
from pathlib import Path
from getpass import getpass

def crear_archivo_env():
    """Crea el archivo .env con la configuraci√≥n de la API"""
    
    print("üîê CONFIGURACI√ìN SEGURA DE API DE CHATGPT")
    print("=" * 50)
    print()
    
    # Verificar si ya existe un archivo .env
    env_file = Path(__file__).parent / ".env"
    if env_file.exists():
        print("‚ö†Ô∏è  Ya existe un archivo .env")
        respuesta = input("¬øQuieres sobrescribirlo? (s/N): ").lower()
        if respuesta != 's':
            print("‚ùå Configuraci√≥n cancelada")
            return
    
    # Solicitar la API key de forma segura
    print("üìù INGRESA TU API KEY DE CHATGPT")
    print("Obt√©n tu clave gratuita en: https://platform.openai.com/api-keys")
    print()
    
    api_key = getpass("üîë API Key de OpenAI (no se mostrar√°): ").strip()
    
    if not api_key:
        print("‚ùå No se proporcion√≥ una API key")
        return
    
    # Verificar formato b√°sico de la API key
    if not api_key.startswith("sk-"):
        print("‚ö†Ô∏è  La API key no parece tener el formato correcto (deber√≠a empezar con 'sk-')")
        continuar = input("¬øContinuar de todas formas? (s/N): ").lower()
        if continuar != 's':
            return
    
    # Crear contenido del archivo .env
    env_content = f"""# ===========================================
# LUCIA IA - CONFIGURACI√ìN DE API
# ===========================================
# Archivo generado autom√°ticamente - NO SUBIR A GITHUB

# ===========================================
# OPENAI API (ChatGPT)
# ===========================================
OPENAI_API_KEY={api_key}

# ===========================================
# CONFIGURACI√ìN DE LUCIA
# ===========================================
LUCIA_DEFAULT_PERSONALITY=metaverso
LUCIA_LOG_LEVEL=INFO
LUCIA_ENABLE_PARAPHRASING=true
LUCIA_ENABLE_MEMORY_LEARNING=true
LUCIA_ENABLE_API_ROTATION=true

# ===========================================
# CONFIGURACI√ìN DE SEGURIDAD
# ===========================================
LUCIA_ENCRYPT_SENSITIVE_DATA=true
LUCIA_LOG_API_CALLS=false
LUCIA_RATE_LIMITING=true
"""
    
    # Escribir el archivo .env
    try:
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        print("‚úÖ Archivo .env creado exitosamente")
        print(f"üìÅ Ubicaci√≥n: {env_file}")
        print()
        
        # Configurar la API en el sistema
        configurar_api_en_sistema(api_key)
        
    except Exception as e:
        print(f"‚ùå Error creando el archivo .env: {e}")

def configurar_api_en_sistema(api_key):
    """Configura la API en el sistema de configuraci√≥n de LucIA"""
    
    print("üîß CONFIGURANDO API EN EL SISTEMA")
    print("=" * 40)
    
    try:
        # Importar el m√≥dulo de configuraci√≥n
        from config import Config, APIType
        
        # Crear instancia de configuraci√≥n
        config = Config()
        
        # Agregar la API de OpenAI
        config.add_api(
            name="openai_chatgpt",
            api_type=APIType.OPENAI,
            api_key=api_key,
            endpoint="https://api.openai.com/v1",
            model="gpt-3.5-turbo",  # Modelo gratuito
            daily_limit=100,  # L√≠mite diario para versi√≥n gratuita
            priority=1,  # Prioridad alta
            cost_per_request=0.002,  # Costo aproximado por 1K tokens
            response_timeout=30,
            max_tokens=1500,
            temperature=0.7
        )
        
        print("‚úÖ API de ChatGPT configurada en el sistema")
        print("üìä Configuraci√≥n:")
        print(f"   - Modelo: gpt-3.5-turbo")
        print(f"   - L√≠mite diario: 100 requests")
        print(f"   - Prioridad: 1 (alta)")
        print(f"   - Timeout: 30 segundos")
        
        # Mostrar APIs disponibles
        print()
        print("üìã APIs configuradas:")
        for api in config.get_enabled_apis():
            print(f"   - {api.name}: {api.api_type.value} ({'‚úÖ' if api.enabled else '‚ùå'})")
        
    except Exception as e:
        print(f"‚ùå Error configurando la API en el sistema: {e}")
        print("üí° Puedes configurar manualmente editando el archivo de configuraci√≥n")

def verificar_configuracion():
    """Verifica que la configuraci√≥n est√© correcta"""
    
    print("üîç VERIFICANDO CONFIGURACI√ìN")
    print("=" * 30)
    
    # Verificar archivo .env
    env_file = Path(__file__).parent / ".env"
    if env_file.exists():
        print("‚úÖ Archivo .env encontrado")
        
        # Verificar que no est√© en git
        try:
            from git import Repo
            repo = Repo(Path(__file__).parent.parent)
            if not repo.ignored(env_file):
                print("‚úÖ Archivo .env est√° en .gitignore")
            else:
                print("‚ö†Ô∏è  Archivo .env NO est√° en .gitignore")
        except:
            print("‚ÑπÔ∏è  No se pudo verificar .gitignore")
    else:
        print("‚ùå Archivo .env no encontrado")
    
    # Verificar configuraci√≥n del sistema
    try:
        from config import Config
        config = Config()
        apis = config.get_enabled_apis()
        
        if apis:
            print(f"‚úÖ {len(apis)} APIs configuradas en el sistema")
            for api in apis:
                print(f"   - {api.name}: {api.api_type.value}")
        else:
            print("‚ùå No hay APIs configuradas en el sistema")
            
    except Exception as e:
        print(f"‚ùå Error verificando configuraci√≥n del sistema: {e}")

def main():
    """Funci√≥n principal"""
    
    print("ü§ñ CONFIGURADOR DE API PARA LUCIA IA")
    print("=" * 50)
    print()
    
    while True:
        print("Opciones disponibles:")
        print("1. üîê Configurar API de ChatGPT")
        print("2. üîç Verificar configuraci√≥n actual")
        print("3. ‚ùå Salir")
        print()
        
        opcion = input("Selecciona una opci√≥n (1-3): ").strip()
        
        if opcion == "1":
            crear_archivo_env()
        elif opcion == "2":
            verificar_configuracion()
        elif opcion == "3":
            print("üëã ¬°Hasta luego!")
            break
        else:
            print("‚ùå Opci√≥n no v√°lida")
        
        print()
        input("Presiona Enter para continuar...")
        print()

if __name__ == "__main__":
    main() 