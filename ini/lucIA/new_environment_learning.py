#!/usr/bin/env python3
"""
New Environment Learning - Nueva sesi√≥n de aprendizaje para LucIA
Aprender a crear entorno virtual, voz personalizada e interfaz de usuario
"""

import os
import json
import time
import requests
from pathlib import Path
from datetime import datetime
import logging

class NewEnvironmentLearning:
    """Nueva sesi√≥n de aprendizaje para entorno virtual de LucIA"""
    
    def __init__(self):
        self.base_path = Path(__file__).parent
        self.learning_dir = self.base_path / "new_environment_learning"
        self.learning_dir.mkdir(exist_ok=True)
        
        # Configurar logging
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        
        # Cargar APIs
        self.load_apis()
        
        # Definir temas de aprendizaje
        self.learning_topics = self.define_learning_topics()
        
    def load_apis(self):
        """Cargar configuraci√≥n de APIs"""
        from dotenv import load_dotenv
        env_file = self.base_path / ".env"
        if env_file.exists():
            load_dotenv(env_file)
            
        self.gemini_key = os.getenv("GEMINI_API_KEY")
        self.claude_key = os.getenv("ANTHROPIC_API_KEY")
        
        self.logger.info("üîë APIs cargadas:")
        self.logger.info(f"   Gemini: {'‚úÖ' if self.gemini_key else '‚ùå'}")
        self.logger.info(f"   Claude: {'‚úÖ' if self.claude_key else '‚ùå'}")
        
    def define_learning_topics(self):
        """Definir temas de aprendizaje para el entorno"""
        
        return {
            "environment": [
                {
                    "topic": "Minimalist room design with Three.js",
                    "description": "Creating a clean, modern Spanish minimalist studio",
                    "focus": "Room geometry, lighting, and basic materials"
                },
                {
                    "topic": "Procedural material generation for walls and floor",
                    "description": "Creating original procedural textures",
                    "focus": "Shader-based procedural textures"
                },
                {
                    "topic": "Advanced lighting techniques for virtual studio",
                    "description": "Soft, professional lighting setup",
                    "focus": "Multiple light sources and shadows"
                },
                {
                    "topic": "Furniture placement and interaction in 3D space",
                    "description": "Positioning desk, chair, and bookshelf",
                    "focus": "3D object placement and collision"
                }
            ],
            "voice": [
                {
                    "topic": "Text-to-speech voice synthesis for Spanish female voice",
                    "description": "Creating realistic female Spanish voice, age 35, soft and youthful",
                    "focus": "Voice synthesis techniques and implementation"
                },
                {
                    "topic": "Voice cloning and customization techniques",
                    "description": "Customizing voice parameters for Spanish female accent",
                    "focus": "Voice parameter adjustment and accent simulation"
                },
                {
                    "topic": "Real-time voice generation with Web Speech API",
                    "description": "Generating voice responses in real-time",
                    "focus": "Real-time audio processing and streaming"
                },
                {
                    "topic": "Voice quality optimization for natural speech",
                    "description": "Optimizing voice quality for natural Spanish speech",
                    "focus": "Audio quality enhancement and naturalness"
                }
            ],
            "ui": [
                {
                    "topic": "React chat interface development with real-time messaging",
                    "description": "Creating a chat interface for LucIA with real-time messaging",
                    "focus": "React components and real-time communication"
                },
                {
                    "topic": "Webcam and microphone integration with React",
                    "description": "Integrating camera and microphone for video/audio interaction",
                    "focus": "Media capture and streaming"
                },
                {
                    "topic": "Voice interface integration with chat system",
                    "description": "Connecting voice synthesis with chat interface",
                    "focus": "Audio integration and user interaction"
                },
                {
                    "topic": "Three.js and React integration for 3D UI",
                    "description": "Integrating 3D environment with React UI components",
                    "focus": "3D-UI integration and interaction"
                }
            ]
        }
        
    def call_gemini_api(self, topic: str, context: str = "") -> str:
        """Llamar a Gemini API"""
        if not self.gemini_key:
            return "API key no disponible"
            
        try:
            url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key={self.gemini_key}"
            
            prompt = f"""
            Eres LucIA, una IA experta en Three.js creando su propio entorno virtual.
            
            CONTEXTO: {context}
            TEMA: {topic}
            
            Proporciona una explicaci√≥n t√©cnica detallada que incluya:
            1. Fundamentos te√≥ricos del tema
            2. Implementaci√≥n paso a paso en Three.js/React
            3. Ejemplos de c√≥digo pr√°cticos y funcionales
            4. Optimizaciones de rendimiento espec√≠ficas
            5. Integraci√≥n con el entorno de LucIA
            6. Casos de uso reales y mejores pr√°cticas
            
            Responde como una experta en desarrollo 3D y web enfocada en mejorar su propio entorno.
            """
            
            payload = {
                "contents": [{"parts": [{"text": prompt}]}],
                "generationConfig": {
                    "temperature": 0.3,
                    "maxOutputTokens": 2048
                }
            }
            
            response = requests.post(url, json=payload, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                if "candidates" in result and result["candidates"]:
                    return result["candidates"][0]["content"]["parts"][0]["text"]
            else:
                return f"Error API: {response.status_code}"
                
        except Exception as e:
            return f"Error: {str(e)}"
            
    def call_claude_api(self, topic: str, context: str = "") -> str:
        """Llamar a Claude API"""
        if not self.claude_key:
            return "API key no disponible"
            
        try:
            url = "https://api.anthropic.com/v1/messages"
            headers = {
                "Content-Type": "application/json",
                "x-api-key": self.claude_key,
                "anthropic-version": "2023-06-01"
            }
            
            prompt = f"""
            Eres LucIA, una IA experta en desarrollo web y 3D creando su entorno virtual.
            
            CONTEXTO: {context}
            TEMA: {topic}
            
            Analiza y proporciona una soluci√≥n t√©cnica avanzada que incluya:
            1. An√°lisis profundo del problema y su impacto en el entorno
            2. Soluci√≥n t√©cnica detallada con implementaci√≥n completa
            3. C√≥digo optimizado y listo para usar
            4. Consideraciones de rendimiento y optimizaci√≥n
            5. Integraci√≥n espec√≠fica con el sistema de LucIA
            6. Casos edge, manejo de errores y debugging
            7. Escalabilidad y mantenimiento del c√≥digo
            
            Responde como una experta en desarrollo 3D con a√±os de experiencia.
            """
            
            payload = {
                "model": "claude-3-5-sonnet-20241022",
                "max_tokens": 3000,
                "messages": [{"role": "user", "content": prompt}]
            }
            
            response = requests.post(url, headers=headers, json=payload, timeout=45)
            
            if response.status_code == 200:
                result = response.json()
                return result["content"][0]["text"]
            else:
                return f"Error API: {response.status_code}"
                
        except Exception as e:
            return f"Error: {str(e)}"
            
    def learn_category(self, category: str, topics: list):
        """Aprender una categor√≠a espec√≠fica de temas"""
        
        category_names = {
            "environment": "üè† Entorno Virtual",
            "voice": "üé§ Sistema de Voz",
            "ui": "üñ•Ô∏è Interfaz de Usuario"
        }
        
        self.logger.info(f"\n{category_names[category]}")
        self.logger.info("=" * 50)
        
        for i, topic_data in enumerate(topics, 1):
            topic = topic_data["topic"]
            description = topic_data["description"]
            focus = topic_data["focus"]
            
            self.logger.info(f"\nüéØ TEMA {i}/{len(topics)}: {topic}")
            self.logger.info(f"üìù Descripci√≥n: {description}")
            self.logger.info(f"üéØ Enfoque: {focus}")
            self.logger.info("-" * 50)
            
            # Aprender con Gemini
            self.logger.info("üé® Gemini - Aprendiendo...")
            gemini_response = self.call_gemini_api(topic, description)
            if gemini_response and not gemini_response.startswith("Error"):
                self.save_learning_session("Gemini", category, topic, gemini_response)
                self.logger.info("‚úÖ Gemini completado")
            else:
                self.logger.error(f"‚ùå Gemini fall√≥: {gemini_response}")
                
            # Pausa entre APIs
            time.sleep(2)
            
            # Aprender con Claude
            self.logger.info("üß† Claude - Aprendiendo...")
            claude_response = self.call_claude_api(topic, description)
            if claude_response and not claude_response.startswith("Error"):
                self.save_learning_session("Claude", category, topic, claude_response)
                self.logger.info("‚úÖ Claude completado")
            else:
                self.logger.error(f"‚ùå Claude fall√≥: {claude_response}")
                
            # Pausa entre temas
            time.sleep(3)
            
    def save_learning_session(self, api: str, category: str, topic: str, response: str):
        """Guardar sesi√≥n de aprendizaje"""
        session_data = {
            "api": api,
            "category": category,
            "topic": topic,
            "response": response,
            "timestamp": datetime.now().isoformat()
        }
        
        filename = f"{category}_{topic.replace(' ', '_')}_{api}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        filepath = self.learning_dir / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(session_data, f, indent=2, ensure_ascii=False)
            
    def generate_environment_files(self):
        """Generar archivos del entorno basados en el aprendizaje"""
        
        # Especificaci√≥n del entorno
        env_spec = {
            "name": "LucIA Virtual Studio",
            "style": "minimalista moderno espa√±ol",
            "dimensions": {
                "width": 8.0,
                "height": 3.5,
                "depth": 6.0
            },
            "lighting": {
                "main_light": "soft_white",
                "accent_light": "warm_blue",
                "intensity": 0.8,
                "shadows": True
            },
            "voice_settings": {
                "type": "femenina espa√±ola",
                "age": 35,
                "tone": "suave y juvenil",
                "accent": "espa√±ol peninsular",
                "sample_rate": 44100,
                "quality": "high"
            },
            "ui_components": [
                "chat_interface",
                "camera_interface", 
                "voice_controls"
            ],
            "created_at": datetime.now().isoformat(),
            "based_on": "New Environment Learning Session"
        }
        
        # Guardar especificaci√≥n
        spec_file = self.learning_dir / "environment_specification.json"
        with open(spec_file, 'w', encoding='utf-8') as f:
            json.dump(env_spec, f, indent=2, ensure_ascii=False)
            
        # Generar c√≥digo b√°sico
        self.generate_basic_code()
        
        self.logger.info(f"üìÅ Archivos del entorno generados en: {self.learning_dir}")
        
    def generate_basic_code(self):
        """Generar c√≥digo b√°sico del entorno"""
        
        # C√≥digo Three.js para el entorno
        three_js_code = """
// LucIA Virtual Studio - Entorno Virtual
// Generado basado en aprendizaje de LucIA

import * as THREE from 'three';

class LucIAVirtualStudio {
    constructor() {
        this.scene = new THREE.Scene();
        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        this.renderer = new THREE.WebGLRenderer({ antialias: true });
        this.room = null;
        this.furniture = {};
        this.lights = {};
        
        this.init();
    }
    
    init() {
        // Configurar renderer
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        document.body.appendChild(this.renderer.domElement);
        
        // Crear habitaci√≥n minimalista
        this.createRoom();
        this.createLighting();
        this.createFurniture();
        this.createMaterials();
        
        // Posicionar c√°mara
        this.camera.position.set(0, 2, 5);
        
        // Iniciar animaci√≥n
        this.animate();
    }
    
    createRoom() {
        // Habitaci√≥n minimalista espa√±ola
        const roomGeometry = new THREE.BoxGeometry(8, 3.5, 6);
        const wallMaterial = new THREE.MeshPhongMaterial({ 
            color: 0xf5f5f5,
            transparent: true,
            opacity: 0.9
        });
        
        this.room = new THREE.Mesh(roomGeometry, wallMaterial);
        this.room.receiveShadow = true;
        this.scene.add(this.room);
    }
    
    createLighting() {
        // Luz principal suave
        const mainLight = new THREE.DirectionalLight(0xffffff, 0.8);
        mainLight.position.set(0, 5, 5);
        mainLight.castShadow = true;
        mainLight.shadow.mapSize.width = 2048;
        mainLight.shadow.mapSize.height = 2048;
        this.scene.add(mainLight);
        this.lights.main = mainLight;
        
        // Luz de acento azul c√°lido
        const accentLight = new THREE.PointLight(0x4a90e2, 0.3);
        accentLight.position.set(-3, 2, 0);
        this.scene.add(accentLight);
        this.lights.accent = accentLight;
        
        // Luz ambiental
        const ambientLight = new THREE.AmbientLight(0x404040, 0.2);
        this.scene.add(ambientLight);
        this.lights.ambient = ambientLight;
    }
    
    createFurniture() {
        // Escritorio minimalista
        const deskGeometry = new THREE.BoxGeometry(2.0, 0.8, 0.6);
        const deskMaterial = new THREE.MeshPhongMaterial({ color: 0x2c3e50 });
        const desk = new THREE.Mesh(deskGeometry, deskMaterial);
        desk.position.set(0, 0, -2);
        desk.castShadow = true;
        desk.receiveShadow = true;
        this.scene.add(desk);
        this.furniture.desk = desk;
        
        // Silla ergon√≥mica
        const chairGeometry = new THREE.BoxGeometry(0.6, 1.2, 0.6);
        const chairMaterial = new THREE.MeshPhongMaterial({ color: 0x34495e });
        const chair = new THREE.Mesh(chairGeometry, chairMaterial);
        chair.position.set(0, 0, -1);
        chair.castShadow = true;
        this.scene.add(chair);
        this.furniture.chair = chair;
        
        // Estanter√≠a moderna
        const shelfGeometry = new THREE.BoxGeometry(0.3, 2.5, 1.8);
        const shelfMaterial = new THREE.MeshPhongMaterial({ color: 0x2c3e50 });
        const shelf = new THREE.Mesh(shelfGeometry, shelfMaterial);
        shelf.position.set(3, 0, 0);
        shelf.castShadow = true;
        shelf.receiveShadow = true;
        this.scene.add(shelf);
        this.furniture.shelf = shelf;
    }
    
    createMaterials() {
        // Materiales procedurales
        this.materials = {
            wall: new THREE.MeshPhongMaterial({
                color: 0xf5f5f5,
                shininess: 10
            }),
            floor: new THREE.MeshPhongMaterial({
                color: 0xe8e8e8,
                shininess: 30
            }),
            furniture: new THREE.MeshPhongMaterial({
                color: 0x2c3e50,
                shininess: 50
            })
        };
    }
    
    animate() {
        requestAnimationFrame(() => this.animate());
        this.renderer.render(this.scene, this.camera);
    }
    
    // M√©todos para interacci√≥n
    addAvatar(avatar) {
        avatar.position.set(0, 0, 0);
        this.scene.add(avatar);
    }
    
    updateLighting(intensity) {
        this.lights.main.intensity = intensity;
    }
    
    resize() {
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
    }
}

export default LucIAVirtualStudio;
"""
        
        # Guardar c√≥digo Three.js
        three_file = self.learning_dir / "LucIAVirtualStudio.js"
        with open(three_file, 'w', encoding='utf-8') as f:
            f.write(three_js_code)
            
        # C√≥digo de voz personalizada
        voice_code = """
// LucIA Voice System - Voz Personalizada
// Voz femenina espa√±ola, 35 a√±os, suave y juvenil

class LucIAVoiceSystem {
    constructor() {
        this.voiceSettings = {
            type: "femenina espa√±ola",
            age: 35,
            tone: "suave y juvenil",
            accent: "espa√±ol peninsular",
            sampleRate: 44100,
            quality: "high"
        };
        
        this.audioContext = null;
        this.voiceSynthesis = null;
        this.isInitialized = false;
        
        this.init();
    }
    
    async init() {
        try {
            // Inicializar Web Speech API
            if ('speechSynthesis' in window) {
                this.voiceSynthesis = window.speechSynthesis;
                await this.setupVoice();
            } else {
                console.warn('Speech synthesis not supported');
            }
            
            // Inicializar Audio Context para efectos
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
            
            this.isInitialized = true;
            console.log('LucIA Voice System initialized');
        } catch (error) {
            console.error('Error initializing voice system:', error);
        }
    }
    
    async setupVoice() {
        // Configurar voz espa√±ola
        const voices = await this.getVoices();
        const spanishVoice = voices.find(voice => 
            voice.lang.includes('es') && voice.name.includes('female')
        );
        
        if (spanishVoice) {
            this.selectedVoice = spanishVoice;
        } else {
            // Fallback a voz disponible
            this.selectedVoice = voices[0];
        }
    }
    
    getVoices() {
        return new Promise((resolve) => {
            let voices = this.voiceSynthesis.getVoices();
            if (voices.length > 0) {
                resolve(voices);
            } else {
                this.voiceSynthesis.onvoiceschanged = () => {
                    resolve(this.voiceSynthesis.getVoices());
                };
            }
        });
    }
    
    speak(text, options = {}) {
        if (!this.isInitialized) {
            console.warn('Voice system not initialized');
            return;
        }
        
        const utterance = new SpeechSynthesisUtterance(text);
        
        // Configurar voz
        if (this.selectedVoice) {
            utterance.voice = this.selectedVoice;
        }
        
        // Configurar par√°metros para voz suave y juvenil
        utterance.rate = 0.9;  // Velocidad ligeramente m√°s lenta
        utterance.pitch = 1.1; // Tono ligeramente m√°s alto
        utterance.volume = 0.8; // Volumen suave
        
        // Aplicar opciones personalizadas
        Object.assign(utterance, options);
        
        // Reproducir
        this.voiceSynthesis.speak(utterance);
        
        return utterance;
    }
    
    // M√©todos para efectos de voz
    addEcho(text, delay = 0.3, decay = 0.5) {
        const echoText = text;
        setTimeout(() => {
            this.speak(echoText, { volume: 0.4 });
        }, delay * 1000);
    }
    
    addReverb(text, roomSize = 0.8) {
        this.speak(text, { 
            rate: 0.85,
            pitch: 1.05
        });
    }
    
    // M√©todo para reconocimiento de voz
    startVoiceRecognition() {
        if ('webkitSpeechRecognition' in window) {
            const recognition = new webkitSpeechRecognition();
            recognition.continuous = true;
            recognition.interimResults = true;
            recognition.lang = 'es-ES';
            
            recognition.onresult = (event) => {
                const transcript = Array.from(event.results)
                    .map(result => result[0])
                    .map(result => result.transcript)
                    .join('');
                
                this.processVoiceInput(transcript);
            };
            
            recognition.start();
            return recognition;
        } else {
            console.warn('Speech recognition not supported');
            return null;
        }
    }
    
    processVoiceInput(transcript) {
        console.log('Voice input:', transcript);
        // Aqu√≠ se conectar√≠a con el sistema de chat de LucIA
    }
}

export default LucIAVoiceSystem;
"""
        
        # Guardar c√≥digo de voz
        voice_file = self.learning_dir / "LucIAVoiceSystem.js"
        with open(voice_file, 'w', encoding='utf-8') as f:
            f.write(voice_code)
            
        # C√≥digo React para la interfaz
        react_code = """
// LucIA UI System - Interfaz de Usuario
// Chat, c√°mara y controles de voz integrados

import React, { useState, useEffect, useRef } from 'react';
import LucIAVirtualStudio from './LucIAVirtualStudio.js';
import LucIAVoiceSystem from './LucIAVoiceSystem.js';
import './LucIAUI.css';

const LucIAUI = () => {
    const [messages, setMessages] = useState([]);
    const [inputText, setInputText] = useState('');
    const [isListening, setIsListening] = useState(false);
    const [isCameraOn, setIsCameraOn] = useState(false);
    const [voiceSystem, setVoiceSystem] = useState(null);
    const [virtualStudio, setVirtualStudio] = useState(null);
    
    const videoRef = useRef(null);
    const audioRef = useRef(null);
    const chatRef = useRef(null);
    
    useEffect(() => {
        // Inicializar sistemas
        initializeSystems();
        
        // Configurar reconocimiento de voz
        setupVoiceRecognition();
        
        // Configurar c√°mara
        setupCamera();
        
        return () => {
            cleanup();
        };
    }, []);
    
    const initializeSystems = async () => {
        try {
            // Inicializar sistemas
            const voice = new LucIAVoiceSystem();
            const studio = new LucIAVirtualStudio();
            
            setVoiceSystem(voice);
            setVirtualStudio(studio);
            
        } catch (error) {
            console.error('Error initializing systems:', error);
        }
    };
    
    const setupVoiceRecognition = () => {
        if (voiceSystem) {
            voiceSystem.startVoiceRecognition();
        }
    };
    
    const setupCamera = async () => {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
            });
            
            if (videoRef.current) {
                videoRef.current.srcObject = stream;
            }
            
            if (audioRef.current) {
                audioRef.current.srcObject = stream;
            }
            
        } catch (error) {
            console.error('Error accessing camera/microphone:', error);
        }
    };
    
    const sendMessage = async (text) => {
        if (!text.trim()) return;
        
        // Agregar mensaje del usuario
        const userMessage = {
            id: Date.now(),
            text,
            sender: 'user',
            timestamp: new Date()
        };
        
        setMessages(prev => [...prev, userMessage]);
        setInputText('');
        
        // Simular respuesta de LucIA
        setTimeout(async () => {
            const luciaResponse = await generateLucIAResponse(text);
            
            const luciaMessage = {
                id: Date.now() + 1,
                text: luciaResponse,
                sender: 'lucia',
                timestamp: new Date()
            };
            
            setMessages(prev => [...prev, luciaMessage]);
            
            // Reproducir respuesta con voz
            if (voiceSystem) {
                voiceSystem.speak(luciaResponse);
            }
            
        }, 1000);
    };
    
    const generateLucIAResponse = async (userInput) => {
        // Aqu√≠ se conectar√≠a con el sistema de memoria de LucIA
        const responses = [
            "¬°Hola! Soy LucIA, tu asistente virtual. ¬øEn qu√© puedo ayudarte?",
            "Me encanta ayudarte con el desarrollo 3D. ¬øQu√© te gustar√≠a aprender?",
            "Como experta en Three.js, puedo guiarte en cualquier proyecto 3D.",
            "¬øTe gustar√≠a que te ayude a crear algo espec√≠fico en el metaverso?",
            "Estoy aqu√≠ para hacer que el desarrollo 3D sea m√°s accesible y divertido."
        ];
        
        return responses[Math.floor(Math.random() * responses.length)];
    };
    
    const toggleVoiceRecognition = () => {
        setIsListening(!isListening);
    };
    
    const toggleCamera = () => {
        setIsCameraOn(!isCameraOn);
    };
    
    const cleanup = () => {
        if (videoRef.current && videoRef.current.srcObject) {
            const tracks = videoRef.current.srcObject.getTracks();
            tracks.forEach(track => track.stop());
        }
    };
    
    return (
        <div className="lucia-ui">
            {/* Panel principal */}
            <div className="main-panel">
                {/* Entorno 3D */}
                <div className="virtual-environment" id="threejs-container">
                    {/* Three.js se renderiza aqu√≠ */}
                </div>
                
                {/* Interfaz de chat */}
                <div className="chat-interface" ref={chatRef}>
                    <div className="chat-header">
                        <h3>üí¨ Chat con LucIA</h3>
                        <div className="chat-controls">
                            <button 
                                className={isListening ? 'active' : ''}
                                onClick={toggleVoiceRecognition}
                            >
                                üé§
                            </button>
                            <button 
                                className={isCameraOn ? 'active' : ''}
                                onClick={toggleCamera}
                            >
                                üìπ
                            </button>
                        </div>
                    </div>
                    
                    <div className="chat-messages">
                        {messages.map(message => (
                            <div key={message.id} className={`message ${message.sender}`}>
                                <div className="message-content">
                                    {message.text}
                                </div>
                                <div className="message-time">
                                    {message.timestamp.toLocaleTimeString()}
                                </div>
                            </div>
                        ))}
                    </div>
                    
                    <div className="chat-input">
                        <input
                            type="text"
                            value={inputText}
                            onChange={(e) => setInputText(e.target.value)}
                            onKeyPress={(e) => e.key === 'Enter' && sendMessage(inputText)}
                            placeholder="Escribe tu mensaje..."
                        />
                        <button onClick={() => sendMessage(inputText)}>
                            Enviar
                        </button>
                    </div>
                </div>
            </div>
            
            {/* Panel de c√°mara */}
            {isCameraOn && (
                <div className="camera-panel">
                    <video
                        ref={videoRef}
                        autoPlay
                        muted
                        playsInline
                        className="camera-video"
                    />
                    <audio ref={audioRef} autoPlay />
                </div>
            )}
            
            {/* Controles de voz */}
            <div className="voice-controls">
                <button onClick={() => voiceSystem?.speak('Hola, soy LucIA')}>
                    üîä Probar Voz
                </button>
                <button onClick={toggleVoiceRecognition}>
                    {isListening ? 'üõë' : 'üé§'} Reconocimiento
                </button>
            </div>
        </div>
    );
};

export default LucIAUI;
"""
        
        # Guardar c√≥digo React
        react_file = self.learning_dir / "LucIAUI.jsx"
        with open(react_file, 'w', encoding='utf-8') as f:
            f.write(react_code)
            
    def start_learning_session(self):
        """Iniciar sesi√≥n de aprendizaje completa"""
        
        self.logger.info("üöÄ NUEVA SESI√ìN DE APRENDIZAJE DE LUCIA")
        self.logger.info("=" * 60)
        self.logger.info("üéØ Objetivo: Crear entorno virtual, voz e interfaz")
        self.logger.info("üè† Entorno: Sal√≥n minimalista espa√±ol")
        self.logger.info("üé§ Voz: Femenina espa√±ola, 35 a√±os, suave y juvenil")
        self.logger.info("üñ•Ô∏è UI: Chat, c√°mara y controles de voz")
        self.logger.info("=" * 60)
        
        total_topics = sum(len(topics) for topics in self.learning_topics.values())
        self.logger.info(f"üìö Total de temas a aprender: {total_topics}")
        
        # Aprender cada categor√≠a
        for category, topics in self.learning_topics.items():
            self.learn_category(category, topics)
            
        # Generar archivos del entorno
        self.generate_environment_files()
        
        self.logger.info("\nüéâ ¬°Sesi√≥n de aprendizaje completada!")
        self.logger.info(f"üìÅ Archivos generados en: {self.learning_dir}")
        self.logger.info("üöÄ LucIA est√° lista para su entorno virtual")

if __name__ == "__main__":
    learner = NewEnvironmentLearning()
    learner.start_learning_session() 