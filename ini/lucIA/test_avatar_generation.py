#!/usr/bin/env python3
"""
Script de prueba para verificar la generaci√≥n de avatares 3D femeninos
Especialmente para confirmar que LucIA use su conocimiento de Three.js
"""

import asyncio
import sys
import os
from pathlib import Path

# A√±adir el directorio actual al path
sys.path.append(str(Path(__file__).parent))

from lucia_core import LucIACore
from config import PersonalityType

async def test_avatar_generation():
    """Prueba la generaci√≥n de avatares 3D femeninos"""
    
    print("üé≠ INICIANDO PRUEBAS DE GENERACI√ìN DE AVATARES 3D")
    print("=" * 60)
    
    # Inicializar LucIA
    lucia = LucIACore(
        name="LucIA",
        personality=PersonalityType.METAVERSE,
        enable_memory=True,
        enable_paraphrasing=True
    )
    
    # Preguntas espec√≠ficas sobre generaci√≥n de avatares
    avatar_questions = [
        {
            "question": "Genera c√≥digo Three.js para crear un avatar 3D femenino completo",
            "expected": "C√≥digo Three.js espec√≠fico para avatar femenino",
            "category": "Generaci√≥n de c√≥digo"
        },
        {
            "question": "¬øC√≥mo creo un avatar femenino en Three.js con geometr√≠as b√°sicas?",
            "expected": "Explicaci√≥n t√©cnica con c√≥digo Three.js",
            "category": "Explicaci√≥n t√©cnica"
        },
        {
            "question": "Mu√©strame el c√≥digo para crear la cabeza de un avatar femenino en Three.js",
            "expected": "C√≥digo espec√≠fico para cabeza femenina",
            "category": "Componente espec√≠fico"
        },
        {
            "question": "Necesito crear un avatar 3D femenino con pelo largo, ¬øc√≥mo lo hago en Three.js?",
            "expected": "C√≥digo para avatar con pelo largo",
            "category": "Caracter√≠sticas espec√≠ficas"
        },
        {
            "question": "¬øPuedes generar un avatar femenino completo con animaciones en Three.js?",
            "expected": "C√≥digo completo con animaciones",
            "category": "Avatar completo con animaciones"
        }
    ]
    
    results = []
    
    for i, test in enumerate(avatar_questions, 1):
        print(f"\nüé® PRUEBA {i}: {test['category']}")
        print(f"Pregunta: {test['question']}")
        print(f"Esperado: {test['expected']}")
        print("-" * 40)
        
        try:
            # Obtener respuesta de LucIA
            response = await lucia.chat(test['question'])
            
            print(f"Respuesta de LucIA:")
            print(f"üìù Original: {response.original_response[:200]}...")
            print(f"üîÑ Parafraseada: {response.paraphrased_response[:200]}...")
            print(f"üéØ Confianza: {response.confidence:.2f}")
            print(f"‚ö° Tiempo: {response.processing_time:.2f}s")
            print(f"üîó API: {response.source_api}")
            
            # Evaluar la respuesta
            evaluation = evaluate_avatar_response(test['question'], response.paraphrased_response, test['expected'])
            results.append({
                "test": i,
                "category": test['category'],
                "question": test['question'],
                "response": response.paraphrased_response,
                "evaluation": evaluation,
                "confidence": response.confidence
            })
            
            print(f"‚úÖ Evaluaci√≥n: {evaluation['score']}/10 - {evaluation['comment']}")
            
            # Mostrar c√≥digo si est√° presente
            if "THREE." in response.paraphrased_response or "new THREE" in response.paraphrased_response:
                print("üéØ ¬°C√ìDIGO THREE.JS DETECTADO!")
            else:
                print("‚ö†Ô∏è No se detect√≥ c√≥digo Three.js espec√≠fico")
            
        except Exception as e:
            print(f"‚ùå Error en prueba {i}: {e}")
            results.append({
                "test": i,
                "category": test['category'],
                "question": test['question'],
                "response": f"Error: {e}",
                "evaluation": {"score": 0, "comment": "Error en la prueba"},
                "confidence": 0
            })
    
    # Resumen de resultados
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS DE AVATARES")
    print("=" * 60)
    
    total_score = 0
    total_tests = len(results)
    code_detected = 0
    
    for result in results:
        score = result['evaluation']['score']
        total_score += score
        status = "‚úÖ" if score >= 7 else "‚ö†Ô∏è" if score >= 5 else "‚ùå"
        
        print(f"{status} Prueba {result['test']} ({result['category']}): {score}/10")
        print(f"   Pregunta: {result['question']}")
        
        # Verificar si contiene c√≥digo Three.js
        if "THREE." in result['response'] or "new THREE" in result['response']:
            print(f"   üéØ C√ìDIGO THREE.JS: ‚úÖ")
            code_detected += 1
        else:
            print(f"   üéØ C√ìDIGO THREE.JS: ‚ùå")
        
        print(f"   Evaluaci√≥n: {result['evaluation']['comment']}")
        print()
    
    average_score = total_score / total_tests if total_tests > 0 else 0
    code_percentage = (code_detected / total_tests) * 100 if total_tests > 0 else 0
    
    print(f"üéØ PUNTAJE PROMEDIO: {average_score:.1f}/10")
    print(f"üé® C√ìDIGO THREE.JS GENERADO: {code_detected}/{total_tests} ({code_percentage:.1f}%)")
    
    if average_score >= 8 and code_percentage >= 80:
        print("üåü EXCELENTE: LucIA genera c√≥digo Three.js correctamente")
    elif average_score >= 6 and code_percentage >= 60:
        print("üëç BUENO: LucIA genera c√≥digo Three.js adecuadamente")
    elif average_score >= 4 and code_percentage >= 40:
        print("‚ö†Ô∏è REGULAR: LucIA necesita mejorar en generaci√≥n de c√≥digo")
    else:
        print("‚ùå DEFICIENTE: LucIA no est√° aplicando su conocimiento de Three.js")
    
    return results

def evaluate_avatar_response(question: str, response: str, expected: str) -> dict:
    """Eval√∫a la calidad de una respuesta sobre avatares"""
    
    # Convertir a min√∫sculas para comparaci√≥n
    question_lower = question.lower()
    response_lower = response.lower()
    expected_lower = expected.lower()
    
    score = 10
    comments = []
    
    # Verificar presencia de c√≥digo Three.js
    threejs_indicators = [
        "three.", "new three", "geometry", "material", "mesh", 
        "scene.add", "position.set", "rotation", "scale"
    ]
    
    code_present = any(indicator in response_lower for indicator in threejs_indicators)
    
    if not code_present:
        score -= 4
        comments.append("No contiene c√≥digo Three.js")
    else:
        score += 2
        comments.append("Contiene c√≥digo Three.js")
    
    # Verificar que sea espec√≠fico para avatares femeninos
    if "femenino" in question_lower or "mujer" in question_lower:
        if "femenino" in response_lower or "mujer" in response_lower:
            score += 1
            comments.append("Menciona caracter√≠sticas femeninas")
        else:
            score -= 1
            comments.append("No especifica caracter√≠sticas femeninas")
    
    # Verificar que responda a la pregunta
    if "avatar" in question_lower and "avatar" not in response_lower:
        score -= 2
        comments.append("No menciona avatares")
    
    # Verificar que sea espec√≠fico para Three.js
    if "three.js" in question_lower and "three" not in response_lower:
        score -= 3
        comments.append("No menciona Three.js")
    
    # Verificar longitud y detalle
    if len(response) < 100:
        score -= 2
        comments.append("Respuesta muy corta")
    
    if len(response) > 1000:
        score += 1
        comments.append("Respuesta detallada")
    
    # Verificar que no sea gen√©rica
    generic_phrases = [
        "no puedo", "no es posible", "no tengo", "no puedo generar",
        "no puedo crear", "no puedo hacer", "no puedo proporcionar"
    ]
    
    if any(phrase in response_lower for phrase in generic_phrases):
        score -= 3
        comments.append("Respuesta gen√©rica o evasiva")
    
    # Ajustar puntaje final
    score = max(0, min(10, score))
    
    if score >= 8:
        comment = "Excelente respuesta con c√≥digo Three.js espec√≠fico"
    elif score >= 6:
        comment = "Buena respuesta, c√≥digo Three.js presente"
    elif score >= 4:
        comment = "Respuesta aceptable, c√≥digo Three.js limitado"
    else:
        comment = "Respuesta deficiente, sin c√≥digo Three.js espec√≠fico"
    
    if comments:
        comment += f" ({', '.join(comments)})"
    
    return {
        "score": score,
        "comment": comment,
        "details": comments,
        "code_present": code_present
    }

async def main():
    """Funci√≥n principal"""
    try:
        results = await test_avatar_generation()
        
        # Guardar resultados
        import json
        from datetime import datetime
        
        results_file = Path("test_results_avatar_generation.json")
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump({
                "timestamp": datetime.now().isoformat(),
                "results": results
            }, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ Resultados guardados en: {results_file}")
        
    except Exception as e:
        print(f"‚ùå Error en las pruebas: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 