name: 🚀 Release Automatizado - Metaverso Web3

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Versión a liberar'
        required: true
        default: '1.0.0'
      release_type:
        description: 'Tipo de release'
        required: true
        default: 'minor'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  NODE_VERSION: '18'
  RUST_VERSION: '1.75'

jobs:
  # 🏗️ BUILD RELEASE
  build-release:
    name: 🏗️ Build de Release
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🦀 Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: 📦 Install Dependencies
        run: |
          npm ci
          cd client && npm ci
          cd ../gateway && npm ci
          cd ../protocol && npm ci
          cd ../engine && cargo build --release
          
      - name: 🏗️ Build All Modules
        run: |
          echo "🏗️ Construyendo todos los módulos..."
          npm run build:all
          
      - name: 📦 Package Release
        run: |
          echo "📦 Empaquetando release..."
          node .bin/builder/package-release.js --version=${{ github.ref_name }}
          
      - name: 📤 Upload Release Assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            dist/
            build/
            packages/

  # 📝 GENERATE CHANGELOG
  generate-changelog:
    name: 📝 Generar Changelog
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Changelog Tools
        run: |
          npm install -g conventional-changelog-cli
          npm install -g @semantic-release/changelog
          
      - name: 📝 Generate Changelog
        run: |
          echo "📝 Generando changelog..."
          conventional-changelog -p angular -i CHANGELOG.md -s -r 0
          
      - name: 🎮 Metaverse Specific Changes
        run: |
          echo "🎮 Generando cambios específicos del metaverso..."
          node .bin/toolkit/generate-metaverse-changelog.js --version=${{ github.ref_name }}
          
      - name: 📤 Upload Changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md

  # 🚀 CREATE RELEASE
  create-release:
    name: 🚀 Crear Release
    runs-on: ubuntu-latest
    needs: [build-release, generate-changelog]
    timeout-minutes: 20
    
    environment:
      name: production
      
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Download Release Assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: ./release-assets
          
      - name: 📦 Download Changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog
          path: ./
          
      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "🎮 Metaverso Web3 v${{ github.ref_name }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: |
            release-assets/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 🌐 DEPLOY TO IPFS
  deploy-ipfs:
    name: 🌐 Desplegar a IPFS
    runs-on: ubuntu-latest
    needs: create-release
    timeout-minutes: 25
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Download Release Assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: ./release-assets
          
      - name: 🔧 Setup IPFS
        run: |
          echo "🔧 Configurando IPFS..."
          npm install -g ipfs-cli
          
      - name: 📤 Upload to IPFS
        run: |
          echo "📤 Subiendo release a IPFS..."
          node .bin/toolkit/ipfs-upload.js --path=release-assets --pin=true --version=${{ github.ref_name }}
          
      - name: 🔗 Update IPFS Links
        run: |
          echo "🔗 Actualizando enlaces IPFS..."
          node .bin/toolkit/update-ipfs-links.js --version=${{ github.ref_name }}

  # 📦 DEPLOY TO ARWEAVE
  deploy-arweave:
    name: 📦 Desplegar a Arweave
    runs-on: ubuntu-latest
    needs: create-release
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Download Release Assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: ./release-assets
          
      - name: 🔧 Setup Arweave
        run: |
          echo "🔧 Configurando Arweave..."
          npm install -g arweave-cli
          
      - name: 📤 Upload to Arweave
        run: |
          echo "📤 Subiendo release a Arweave..."
          node .bin/toolkit/arweave-upload.js --path=release-assets --permanent=true --version=${{ github.ref_name }}
          
      - name: 🔗 Update Arweave Links
        run: |
          echo "🔗 Actualizando enlaces Arweave..."
          node .bin/toolkit/update-arweave-links.js --version=${{ github.ref_name }}

  # ⛓️ UPDATE BLOCKCHAIN
  update-blockchain:
    name: ⛓️ Actualizar Blockchain
    runs-on: ubuntu-latest
    needs: create-release
    timeout-minutes: 40
    
    environment:
      name: production
      
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Download Release Assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: ./release-assets
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Foundry
        run: |
          curl -L https://foundry.paradigm.xyz | bash
          source ~/.bashrc
          foundryup
          
      - name: 🔐 Setup Secrets
        run: |
          echo "🔐 Configurando secretos..."
          echo ${{ secrets.PRIVATE_KEY }} > .env
          echo ${{ secrets.INFURA_URL }} >> .env
          echo ${{ secrets.ETHERSCAN_API_KEY }} >> .env
          
      - name: 🚀 Deploy Updated Contracts
        run: |
          echo "🚀 Desplegando contratos actualizados..."
          cd protocol
          forge script Deploy --rpc-url ${{ secrets.INFURA_URL }} --broadcast --verify
          
      - name: 📊 Update Contract Registry
        run: |
          echo "📊 Actualizando registro de contratos..."
          node .bin/blockchain/update-contract-registry.js --version=${{ github.ref_name }}

  # 🎮 UPDATE METAVERSE
  update-metaverse:
    name: 🎮 Actualizar Metaverso
    runs-on: ubuntu-latest
    needs: [deploy-ipfs, deploy-arweave, update-blockchain]
    timeout-minutes: 30
    
    environment:
      name: production
      
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Download Release Assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: ./release-assets
          
      - name: 🔧 Setup Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🚀 Deploy to Vercel
        run: |
          echo "🚀 Desplegando a Vercel..."
          npm install -g vercel
          vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
          
      - name: 🚀 Deploy to Netlify
        run: |
          echo "🚀 Desplegando a Netlify..."
          npm install -g netlify-cli
          netlify deploy --prod --dir=release-assets/client --token=${{ secrets.NETLIFY_TOKEN }}
          
      - name: 🚀 Deploy to Cloudflare
        run: |
          echo "🚀 Desplegando a Cloudflare..."
          npm install -g wrangler
          wrangler pages publish release-assets/client --project-name=metaverso-web3
          
      - name: 🎮 Update Metaverse Config
        run: |
          echo "🎮 Actualizando configuración del metaverso..."
          node .bin/metaverso/update-config.js --version=${{ github.ref_name }} --env=production

  # 🔍 VERIFICATION
  verify-release:
    name: 🔍 Verificar Release
    runs-on: ubuntu-latest
    needs: update-metaverse
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔍 Health Check - Vercel
        run: |
          echo "🔍 Verificando Vercel..."
          curl -f ${{ secrets.VERCEL_URL }}/health || exit 1
          
      - name: 🔍 Health Check - Netlify
        run: |
          echo "🔍 Verificando Netlify..."
          curl -f ${{ secrets.NETLIFY_URL }}/health || exit 1
          
      - name: 🔍 Health Check - Cloudflare
        run: |
          echo "🔍 Verificando Cloudflare..."
          curl -f ${{ secrets.CLOUDFLARE_URL }}/health || exit 1
          
      - name: 🔍 Blockchain Health
        run: |
          echo "🔍 Verificando blockchain..."
          node .bin/blockchain/health-check.js --version=${{ github.ref_name }}
          
      - name: 📊 Performance Test
        run: |
          echo "📊 Test de rendimiento..."
          node .bin/monitor/performance-check.js --version=${{ github.ref_name }}

  # 📢 NOTIFICATIONS
  notifications:
    name: 📢 Notificaciones
    runs-on: ubuntu-latest
    needs: [create-release, verify-release]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: 📢 Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#metaverso-releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: 📧 Email Notification
        run: |
          echo "📧 Enviando notificación por email..."
          node .bin/toolkit/send-report.js --type=release --version=${{ github.ref_name }} --status=${{ job.status }}
          
      - name: 🐦 Twitter Announcement
        run: |
          echo "🐦 Anunciando en Twitter..."
          node .bin/toolkit/social-announce.js --platform=twitter --type=release --version=${{ github.ref_name }}
          
      - name: 📱 Discord Notification
        run: |
          echo "📱 Notificando en Discord..."
          node .bin/toolkit/discord-notify.js --type=release --version=${{ github.ref_name }} --status=${{ job.status }}
          
      - name: 📺 YouTube Announcement
        run: |
          echo "📺 Anunciando en YouTube..."
          node .bin/toolkit/youtube-announce.js --type=release --version=${{ github.ref_name }}
