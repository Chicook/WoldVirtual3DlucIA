name: 🚀 Despliegue Multi-Entorno - Metaverso Web3

on:
  push:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Entorno de despliegue'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - canary

env:
  NODE_VERSION: '18'
  IPFS_GATEWAY: 'https://ipfs.io/ipfs/'
  ARWEAVE_GATEWAY: 'https://arweave.net/'
  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY || '' }}
  INFURA_URL: ${{ secrets.INFURA_URL || '' }}
  ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY || '' }}
  POLYGON_RPC: ${{ secrets.POLYGON_RPC || '' }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN || '' }}
  NETLIFY_TOKEN: ${{ secrets.NETLIFY_TOKEN || '' }}
  VERCEL_URL: ${{ secrets.VERCEL_URL || '' }}
  NETLIFY_URL: ${{ secrets.NETLIFY_URL || '' }}
  CLOUDFLARE_URL: ${{ secrets.CLOUDFLARE_URL || '' }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK || '' }}

jobs:
  # 🏗️ BUILD
  build:
    name: 🏗️ Build Multi-Módulo
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🦀 Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: 📦 Install Dependencies
        run: |
          npm ci
          cd client && npm ci
          cd ../gateway && npm ci
          cd ../protocol && npm ci
          cd ../engine && cargo build --release
          
      - name: 🏗️ Build Client
        run: |
          echo "🏗️ Construyendo cliente..."
          cd client
          npm run build
          
      - name: 🏗️ Build Gateway
        run: |
          echo "🏗️ Construyendo gateway..."
          cd gateway
          npm run build
          
      - name: 🏗️ Build Engine
        run: |
          echo "🏗️ Construyendo engine..."
          cd engine
          wasm-pack build --target web
          
      - name: 📦 Package Assets
        run: |
          echo "📦 Empaquetando assets..."
          node .bin/builder/optimize-assets.js --package
          
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            client/dist/
            gateway/dist/
            engine/pkg/
            assets/processed/

  # ⛓️ BLOCKCHAIN DEPLOYMENT
  blockchain-deploy:
    name: ⛓️ Despliegue Blockchain
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 45
    
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Foundry
        run: |
          curl -L https://foundry.paradigm.xyz | bash
          source ~/.bashrc
          foundryup
          
      - name: 🔐 Setup Secrets
        run: |
          echo "🔐 Configurando secretos..."
          echo ${{ env.PRIVATE_KEY }} > .env
          echo ${{ env.INFURA_URL }} >> .env
          echo ${{ env.ETHERSCAN_API_KEY }} >> .env
          
      - name: 🏗️ Compile Contracts
        run: |
          echo "🏗️ Compilando contratos..."
          cd protocol
          forge build
          
      - name: 🚀 Deploy to Ethereum
        run: |
          echo "🚀 Desplegando a Ethereum..."
          cd protocol
          forge script Deploy --rpc-url ${{ env.INFURA_URL }} --broadcast --verify
          
      - name: 🚀 Deploy to Polygon
        run: |
          echo "🚀 Desplegando a Polygon..."
          cd protocol
          forge script Deploy --rpc-url ${{ env.POLYGON_RPC }} --broadcast --verify
          
      - name: 📊 Contract Verification
        run: |
          echo "📊 Verificando contratos..."
          node .bin/blockchain/verify-contracts.js
          
      - name: 📤 Upload Contract Addresses
        uses: actions/upload-artifact@v4
        with:
          name: contract-addresses
          path: protocol/deployments/

  # 🌐 IPFS DEPLOYMENT
  ipfs-deploy:
    name: 🌐 Despliegue IPFS
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: 🔧 Setup IPFS
        run: |
          echo "🔧 Configurando IPFS..."
          npm install -g ipfs-cli
          
      - name: 📤 Upload to IPFS
        run: |
          echo "📤 Subiendo a IPFS..."
          node .bin/toolkit/ipfs-upload.js --path=client/dist --pin=true
          
      - name: 🔗 Update IPFS Links
        run: |
          echo "🔗 Actualizando enlaces IPFS..."
          node .bin/toolkit/update-ipfs-links.js

  # 📦 ARWEAVE DEPLOYMENT
  arweave-deploy:
    name: 📦 Despliegue Arweave
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 25
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: 🔧 Setup Arweave
        run: |
          echo "🔧 Configurando Arweave..."
          npm install -g arweave-cli
          
      - name: 📤 Upload to Arweave
        run: |
          echo "📤 Subiendo a Arweave..."
          node .bin/toolkit/arweave-upload.js --path=client/dist --permanent=true
          
      - name: 🔗 Update Arweave Links
        run: |
          echo "🔗 Actualizando enlaces Arweave..."
          node .bin/toolkit/update-arweave-links.js

  # 🎮 METAVERSE DEPLOYMENT
  metaverse-deploy:
    name: 🎮 Despliegue Metaverso
    runs-on: ubuntu-latest
    needs: [blockchain-deploy, ipfs-deploy, arweave-deploy]
    timeout-minutes: 30
    
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./
        continue-on-error: true
          
      - name: 📦 Download Contract Addresses
        uses: actions/download-artifact@v4
        with:
          name: contract-addresses
          path: ./
        continue-on-error: true
          
      - name: 🔧 Setup Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🚀 Deploy to Vercel
        run: |
          echo "🚀 Desplegando a Vercel..."
          npm install -g vercel
          vercel --prod --token ${{ env.VERCEL_TOKEN }}
          
      - name: 🚀 Deploy to Netlify
        run: |
          echo "🚀 Desplegando a Netlify..."
          npm install -g netlify-cli
          netlify deploy --prod --dir=client/dist --token=${{ env.NETLIFY_TOKEN }}
          
      - name: 🚀 Deploy to Cloudflare
        run: |
          echo "🚀 Desplegando a Cloudflare..."
          npm install -g wrangler
          wrangler pages publish client/dist --project-name=metaverso-web3
          
      - name: 🎮 Update Metaverse Config
        run: |
          echo "🎮 Actualizando configuración del metaverso..."
          node .bin/metaverso/update-config.js --env=${{ github.event.inputs.environment || 'staging' }}

  # 🔍 HEALTH CHECK
  health-check:
    name: 🔍 Verificación de Salud
    runs-on: ubuntu-latest
    needs: metaverse-deploy
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔍 Health Check - Vercel
        run: |
          echo "🔍 Verificando Vercel..."
          curl -f ${{ env.VERCEL_URL }}/health || exit 1
          
      - name: 🔍 Health Check - Netlify
        run: |
          echo "🔍 Verificando Netlify..."
          curl -f ${{ env.NETLIFY_URL }}/health || exit 1
          
      - name: 🔍 Health Check - Cloudflare
        run: |
          echo "🔍 Verificando Cloudflare..."
          curl -f ${{ env.CLOUDFLARE_URL }}/health || exit 1
          
      - name: 🔍 Blockchain Health
        run: |
          echo "🔍 Verificando blockchain..."
          node .bin/blockchain/health-check.js
          
      - name: 📊 Performance Test
        run: |
          echo "📊 Test de rendimiento..."
          node .bin/monitor/performance-check.js --deployment

  # 📢 NOTIFICATIONS
  notifications:
    name: 📢 Notificaciones
    runs-on: ubuntu-latest
    needs: [metaverse-deploy, health-check]
    if: always()
    
    steps:
      - name: 📢 Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#metaverso-deployments'
          webhook_url: ${{ env.SLACK_WEBHOOK }}
          
      - name: 📧 Email Notification
        run: |
          echo "📧 Enviando notificación por email..."
          node .bin/toolkit/send-report.js --type=deploy --status=${{ job.status }}
          
      - name: 🐦 Twitter Announcement
        run: |
          echo "🐦 Anunciando en Twitter..."
          node .bin/toolkit/social-announce.js --platform=twitter --type=deploy
          
      - name: 📱 Discord Notification
        run: |
          echo "📱 Notificando en Discord..."
          node .bin/toolkit/discord-notify.js --type=deploy --status=${{ job.status }} 